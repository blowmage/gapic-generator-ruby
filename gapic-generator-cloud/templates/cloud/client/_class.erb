<%- assert_locals service -%>
<% @requires = capture do %>
require "json"
require "pathname"

require "google/gax"
<%- if service.client_lro? -%>
<%= render partial: "client/lro/requires", locals: { service: service } -%>
<%- end -%>

require "<%= service.gem.version_require %>"
require "<%= service.service_proto_require %>"
require "<%= service.credentials_class_require %>"
<%- if service.paths? -%>
require "<%= service.paths_require %>"
<%- end -%>
<% end %>
# Service that implements <%= service.name %> API.
class <%= service.client_class_name %>
<%- if service.paths? -%>
  include <%= service.paths_name %>

<%- end -%>
  # @private
  attr_reader :<%= service.stub_name %>

  # The default address of the service.
  SERVICE_ADDRESS = "<%= service.client_address %>"

  # The default port of the service.
  DEFAULT_SERVICE_PORT = <%= service.client_port %>

  # rubocop:disable Style/MutableConstant

  # The default set of gRPC interceptors.
  GRPC_INTERCEPTORS = []

  # rubocop:enable Style/MutableConstant

  DEFAULT_TIMEOUT = 30

  # The scopes needed to make gRPC calls to all of the methods defined
  # in this service.
  ALL_SCOPES = <%= service.client_scopes.inspect %>.freeze

  <%- if service.client_lro? -%>
  <%= indent_tail render(partial: "client/lro/def", locals: { service: service }), 2 %>
  <%- end -%>

  <%= indent_tail render(partial: "client/init", locals: { service: service }), 2 %>

  # Service calls
  <%- service.methods.each do |method| -%>

  <%= indent_tail render(partial: "client/method/def", locals: { service: service, method: method }), 2 %>
  <%- end %>

  protected

  def create_stub credentials, scopes
    if credentials.is_a?(String) || credentials.is_a?(Hash)
      updater_proc = Credentials.new(credentials).updater_proc
    elsif credentials.is_a? GRPC::Core::Channel
      channel = credentials
    elsif credentials.is_a? GRPC::Core::ChannelCredentials
      chan_creds = credentials
    elsif credentials.is_a? Proc
      updater_proc = credentials
    elsif credentials.is_a? Google::Auth::Credentials
      updater_proc = credentials.updater_proc
    end

    # Allow overriding the service path/port in subclasses.
    service_path = self.class::SERVICE_ADDRESS
    port = self.class::DEFAULT_SERVICE_PORT
    interceptors = self.class::GRPC_INTERCEPTORS
    stub_new = <%= service.services_stub_name_full %>.method :new
    Google::Gax::Grpc.create_stub(
      service_path,
      port,
      chan_creds: chan_creds,
      channel: channel,
      updater_proc: updater_proc,
      scopes: scopes,
      interceptors: interceptors,
      &stub_new
    )
  end

  def default_settings client_config, timeout, metadata, lib_name,
                        lib_version
    google_api_client = ["gl-ruby/#{RUBY_VERSION}"]
    google_api_client << "#{lib_name}/#{lib_version}" if lib_name
    google_api_client << "gapic/#{<%= service.gem.version_name_full %>}"
    google_api_client << "gax/#{Google::Gax::VERSION}"
    google_api_client << "grpc/#{GRPC::VERSION}"
    google_api_client.join " "

    headers = { "x-goog-api-client": google_api_client }
    headers.merge! metadata unless metadata.nil?

    Google::Gax.const_get(:CallSettings).new metadata: headers
  end
end

<% @footer = capture do %>
<%= render partial: "client/helpers", locals: { service: service} %>
<% end %>
