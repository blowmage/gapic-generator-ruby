<%- mp = method_presenter api, service, method -%>
##
<%= prepend_with mp.doc_description, "# " %>
#
<%- mp.arguments.each do |arg| -%>
# @param <%= arg.name %> [<%= arg.doc_types %>]
<%= prepend_with arg.doc_description, "#   " %>
<%- end -%>
# @param options [Google::Gax::CallOptions]
#   Overrides the default settings for this call, e.g, timeout, retries, etc.
<%- if mp.yields? -%>
<%- yield_param_names = mp.yield_params.map(&:name).join(", ") -%>
# @yield [<%= yield_param_names %>] <%= mp.yield_doc_description %>
<%- mp.yield_params.each do |yp| -%>
# @yieldparam <%= yp.name %> [<%= yp.doc_types %>]
<%- end -%>
<%- end -%>
# @return [<%= mp.doc_return_type %>]
# @raise [Google::Gax::GaxError] if the RPC is aborted.
# @example
<%= prepend_with mp.code_example, "#   " %>
#
def <%= mp.name %> \
<%- mp.arguments.each do |arg| -%>
    <%= arg.name %>,
<%- end -%>
    options: nil,
    &block
<%- if mp.client_streaming? -%>
  request = <%= mp.arguments.first.name %>.lazy.map do |req|
    Google::Gax.to_proto req, <%= mp.request_type %>
  end
<%- else -%>
  request = {
<%- mp.arguments.each do |arg| -%>
    <%= arg.name %>: <%= arg.name %>,
<%- end -%>
  }.delete_if { |_, v| v.nil? }
  request = Google::Gax.to_proto request, <%= mp.request_type %>
<%- end -%>
<%- if mp.lro? -%>
  operation = Google::Gax::Operation.new(
    <%= mp.ivar %>.call(request, options),
    @operations_client,
    call_options: options
  )
  operation.on_done { |operation| yield(operation) } if block_given?
  operation
<%- elsif mp.server_streaming? -%>
  <%= mp.ivar %>.call(request, options)
<%- else -%>
  <%= mp.ivar %>.call(request, options, &block)
<%- end -%>
end
