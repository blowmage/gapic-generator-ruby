<%- assert_locals method -%>
##
<%- if method.doc_description -%>
<%= indent method.doc_description, "# " %>
#
<%- end -%>
# @param requests [Google::Gax::StreamInput, Enumerable<<%= method.request_type %> | Hash>]
#   An enumerable of {<%= method.request_type %>} instances.
# @param options [Google::Gax::ApiCall::Options, Hash]
#   Overrides the default settings for this call, e.g, timeout, retries, etc.
#
# @yield [response, operation] Access the result along with the RPC operation
# @yieldparam response [<%= method.return_type %>]
# @yieldparam operation [GRPC::ActiveCall::Operation]
#
# @return [<%= method.return_type %>]
#
# @raise [Google::Gax::GaxError] if the RPC is aborted.
#
# @example
<%= indent method.code_example, "#   " %>
#
def <%= method.name %> requests, options: nil, &block
  unless requests.is_a? Enumerable
    if requests.respond_to? :to_enum
      requests = requests.to_enum
    else
      raise ArgumentError, "requests must be an Enumerable"
    end
  end

  requests = requests.lazy.map do |request|
    Google::Gax.to_proto request, <%= method.request_type %>
  end

  # Converts hash and nil to an options object
  options = Google::Gax::ApiCall::Options.new options.to_h if options.respond_to? :to_h
  header_params = {} # { name: request.name }
  request_params_header = header_params.map { |k, v| "#{k}=#{v}" }.join("&")
  metadata = @metadata.merge "x-goog-request-params".freeze => request_params_header
  retry_policy = {} # retry_codes: [GRPC::Core::StatusCodes::UNAVAILABLE] }
  options.apply_defaults timeout: @timeout, metadata: metadata, retry_policy: retry_policy

  <%= method.ivar %> ||= Google::Gax::ApiCall.new @<%= method.service.stub_name %>.method :<%= method.name %>
  <%= method.ivar %>.call(requests, options: options, operation_callback: block)
end
