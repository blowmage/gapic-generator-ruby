# frozen_string_literal: true

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "bundler/gem_tasks"
require "mkmf"
require "rubocop/rake_task"
require "rake/testtask"

RuboCop::RakeTask.new # Configuration is in .rubocop.yml
Rake::TestTask.new :test do |t|
  t.libs << "test"
  t.libs << "lib"
  t.test_files = FileList["test/**/*_test.rb"]
end

desc "Compile the necessary protobuf files."
task :compile_protos do
  Rake::Task[:clean_protos].invoke

  # TODO: Add check to ensure protoc-gen-ruby and protoc are installed.

  plugin_executable = find_executable "protoc-gen-ruby"
  plugin = "protoc-gen-ruby-protobuf=#{plugin_executable}"

  command = []
  command << "protoc"
  command << "--plugin=#{plugin}"
  command << "--ruby-protobuf_out=lib"
  command << "-I api-common-protos"
  command << "-I protobuf/src"
  command << "api-common-protos/google/api/annotations.proto"
  command << "protobuf/src/google/protobuf/descriptor.proto"
  command << "protobuf/src/google/protobuf/compiler/plugin.proto"
  full_command = command.join " "

  puts full_command
  system full_command
end

desc "Remove the compiled protos."
task :clean_protos do
  FileUtils.rm Dir.glob(File.join("lib", "**", "*.pb.rb"))
end

Rake::Task[:build].enhance [:compile_protos]
Rake::Task[:clean].enhance [:clean_protos]

desc "Run the CI build"
task :ci do
  puts "\nBUILDING gapic-generator\n"
  Rake::Task[:compile_protos].invoke
  puts "\ngapic-generator rubocop\n"
  Rake::Task[:rubocop].invoke
  puts "\ngapic-generator test\n"
  Rake::Task[:test].invoke
end

task default: :ci

desc "Generate the expected output for tests"
task :gen do
  Rake::Task["gen:templates"].invoke
  Rake::Task["gen:gem_creation"].invoke
end
namespace :gen do
  desc "Generate the expected output for template tests"
  task :templates do
    generate_default_templates "speech"
  end

  desc "Generate the expected output for gem creation tests"
  task :gem_creation do
    generate_gem "my_plugin"
  end
end

def generate_default_templates service
  require "google/gapic/schema/api"
  require "google/gapic/generators/default_generator"

  proto_input = File.read "test/proto_input/#{service}.bin", mode: "rb"
  request = Google::Protobuf::Compiler::CodeGeneratorRequest.decode proto_input
  api = Google::Gapic::Schema::Api.new request
  generator = Google::Gapic::Generators::DefaultGenerator.new api
  generator.generate.each do |file|
    target_file_path = File.join "expected_output/templates/default", file.name
    FileUtils.mkdir_p File.dirname(target_file_path)
    File.write target_file_path, file.content
  end
end

def generate_gem gem_name
  require "google/gapic/gem_generator"
  require "tmpdir"

  target_path = File.expand_path File.join("expected_output/gems", gem_name)

  Dir.mktmpdir do |tmp_dir|
    generator = Google::Gapic::GemGenerator.new gem_name, target_path
    generator.generate

    Dir.glob(File.join(tmp_dir, "**/*")).each do |file|
      next unless File.file? file

      local_file_path = file.gsub "#{tmp_dir}/", ""
      target_file_path = File.join target_path, gem_name, local_file_path
      FileUtils.mkdir_p File.dirname(target_file_path)
      File.write target_file_path, File.read(file)
    end
  end
end
