<%- assert_locals service -%>
<% @requires = capture do %>
require "google/gax"

require "<%= service.gem.version_require %>"
require "<%= service.service_proto_require %>"
require "<%= service.credentials_require %>"
<%- if service.paths? -%>
require "<%= service.paths_require %>"
<%- end -%>
<%- if service.lro? -%>
require "<%= service.operations_require %>"
<%- end -%>
<% end %>
# Service that implements <%= service.name %> API.
class <%= service.client_name %>
<%- if service.paths? -%>
  include <%= service.paths_name %>

<%- end -%>
  # @private
  attr_reader :<%= service.stub_name %>

  <%= indent_tail render(partial: "service/client/config", locals: { service: service }), 2 %>

  ##
  # @param credentials [Google::Auth::Credentials, String, Hash,
  #   GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
  #   Provides the means for authenticating requests made by the client. This
  #   parameter can be many types.
  #   A `Google::Auth::Credentials` uses a the properties of its represented
  #   keyfile for authenticating requests made by this client.
  #   A `String` will be treated as the path to the keyfile to be used for the
  #   construction of credentials for this client.
  #   A `Hash` will be treated as the contents of a keyfile to be used for the
  #   construction of credentials for this client.
  #   A `GRPC::Core::Channel` will be used to make calls through.
  #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The
  #   channel credentials should already be composed with a
  #   `GRPC::Core::CallCredentials` object.
  #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc
  #   transforms the metadata for requests, generally, to give OAuth credentials.
  # @param config [Google::Gax::Configuration]
  #   The configuration object to use in place of the default configuration. It is
  #   preferable to configure the default configuration using the
  #   {<%= service.client_name %>.configure} method or by passing a block instead. Optional.
  #
  #   The configuration is set to the derived mode, meaning that values can be changed,
  #   but structural changes (adding new fields, etc.) are not allowed. Structural changes
  #   should be made on {<%= service.client_name %>.configure}.
  #
  # @yield [config] Configure the <%= service.client_name %> client.
  # @yieldparam config [Google::Gax::Configuration]
  #
  def initialize credentials: nil, config: nil
    # These require statements are intentionally placed here to initialize
    # the gRPC module only when it's required.
    # See https://github.com/googleapis/toolkit/issues/446
    require "google/gax/grpc"
    require "<%= service.services_proto_require %>"

    # Create the configuration object
    config ||= <%= service.client_name %>.configure
    config = config.derive! unless config.derived?

    # Yield the configuration if needed
    yield config if block_given?

    @config = config

    # Create credentials
    credentials ||= Credentials.default scope: @config.scope
    if credentials.is_a?(String) || credentials.is_a?(Hash)
      credentials = Credentials.new credentials, scope: @config.scope
    end

    <%- if service.lro? -%>
    <%= service.lro_client_ivar %> = Operations.new(
      credentials: credentials
    )
    <%- end -%>

    @<%= service.stub_name %> = Google::Gax::Grpc::Stub.new(
      <%= service.services_stub_name_full %>,
      credentials:  credentials,
      host:         @config.host,
      port:         @config.port,
      interceptors: @config.interceptors
    )
  end

  # Service calls
  <%- service.methods.each do |method| -%>

  <%= indent_tail render(partial: "service/client/method/def", locals: { method: method }), 2 %>
  <%- end %>
end

<% @footer = capture do %>
<%= render partial: "service/client/helpers", locals: { service: service} %>
<% end %>
