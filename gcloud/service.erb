<%= include "copyright" %>
<%= include "gapic_header" %>


require "json"
require "pathname"

require "google/gax"
<% if service.lro? -%>
  require "google/gax/operation"
  require "google/longrunning/operations_client"
<% end -%>

<% source_requires.each do |source_require| -%>
require "<%= source_require.to_ruby_filepath %>"
<% end %>
require "<% = service.ruby_namespace.path %>/credentials"

<% service.ruby_namespace do %>
  # Service that implements <% service.description %>.
  class <% service.name %>Client
    # @private
    attr_reader :<% service.name.snake_case %>_stub

    # The default address of the service.
    SERVICE_ADDRESS = "<% service.api_address %>".freeze

    # The default port of the service.
    DEFAULT_SERVICE_PORT = <% service.api_port %>

    # The default set of gRPC interceptors.
    GRPC_INTERCEPTORS = []

    DEFAULT_TIMEOUT = 30

    # The scopes needed to make gRPC calls to all of the methods defined in
    # this service.
    ALL_SCOPES = [
      <% service.all_scopes.each |scope| -%>
      "<%= scope %>",
      <% end -%>
    ].freeze

    <% if service.lro? %>
      # @private
      class OperationsClient < Google::Longrunning::OperationsClient
        self::SERVICE_ADDRESS = <% service.name %>Client::SERVICE_ADDRESS
        self::GRPC_INTERCEPTORS = <% service.name %>Client::GRPC_INTERCEPTORS
      end
    <% end %>

    # @param credentials [Google::Auth::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
    #   Provides the means for authenticating requests made by the client. This parameter can
    #   be many types.
    #   A `Google::Auth::Credentials` uses a the properties of its represented keyfile for
    #   authenticating requests made by this client.
    #   A `String` will be treated as the path to the keyfile to be used for the construction of
    #   credentials for this client.
    #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
    #   credentials for this client.
    #   A `GRPC::Core::Channel` will be used to make calls through.
    #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
    #   should already be composed with a `GRPC::Core::CallCredentials` object.
    #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
    #   metadata for requests, generally, to give OAuth credentials.
    # @param scopes [Array<String>]
    #   The OAuth scopes for this service. This parameter is ignored if
    #   an updater_proc is supplied.
    # @param client_config [Hash]
    #   A Hash for call options for each method. See
    #   Google::Gax#construct_settings for the structure of
    #   this data. Falls back to the default config if not specified
    #   or the specified config is missing data points.
    # @param timeout [Numeric]
    #   The default timeout, in seconds, for calls made through this client.
    # @param metadata [Hash]
    #   Default metadata to be sent with each request. This can be overridden on a per call basis.
    # @param exception_transformer [Proc]
    #   An optional proc that intercepts any exceptions raised during an API call to inject
    #   custom error handling.
    def initialize \
        credentials: nil,
        scopes: ALL_SCOPES,
        client_config: {},
        timeout: DEFAULT_TIMEOUT,
        metadata: nil,
        exception_transformer: nil,
        lib_name: nil,
        lib_version: ""
      # These require statements are intentionally placed here to initialize
      # the gRPC module only when it's required.
      # See https://github.com/googleapis/toolkit/issues/446
      require "google/gax/grpc"
      require "<%= service.service_filepath %>"

      credentials ||= <%= service.ruby_namespace %>::Credentials.default

      <% if service.lro? %>
        @operations_client = OperationsClient.new(
          credentials: credentials,
          scopes: scopes,
          client_config: client_config,
          timeout: timeout,
          lib_name: lib_name,
          lib_version: lib_version,
        )
      <% if service.lro? %>

      if credentials.is_a?(String) || credentials.is_a?(Hash)
        updater_proc = <% = service.ruby_namespace %>::Credentials.new(credentials).updater_proc
      end
      if credentials.is_a?(GRPC::Core::Channel)
        channel = credentials
      end
      if credentials.is_a?(GRPC::Core::ChannelCredentials)
        chan_creds = credentials
      end
      if credentials.is_a?(Proc)
        updater_proc = credentials
      end
      if credentials.is_a?(Google::Auth::Credentials)
        updater_proc = credentials.updater_proc
      end

      package_version = Gem.loaded_specs["<% = service.ruby_gem_name %>"].version.version

      google_api_client = "gl-ruby/#{RUBY_VERSION}"
      google_api_client << " #{lib_name}/#{lib_version}" if lib_name
      google_api_client << " gapic/#{package_version} gax/#{Google::Gax::VERSION}"
      google_api_client << " grpc/#{GRPC::VERSION}"
      google_api_client.freeze

      headers = { :"x-goog-api-client" => google_api_client }
      headers.merge!(metadata) unless metadata.nil?
      client_config_file = Pathname.new(__dir__).join(
        "<%= service.json_config_filename %>"
      )
      defaults = client_config_file.open do |f|
        Google::Gax.construct_settings(
          "<% = service.proto_namespace %>",
          JSON.parse(f.read),
          client_config,
          Google::Gax::Grpc::STATUS_CODE_NAMES,
          timeout,
          errors: Google::Gax::Grpc::API_ERRORS,
          metadata: headers
        )
      end

      # Allow overriding the service path/port in subclasses.
      service_path = self.class::SERVICE_ADDRESS
      port = self.class::DEFAULT_SERVICE_PORT
      interceptors = self.class::GRPC_INTERCEPTORS
      @<% service.name.snake_case %>_stub = Google::Gax::Grpc.create_stub(
        service_path,
        port,
        chan_creds: chan_creds,
        channel: channel,
        updater_proc: updater_proc,
        scopes: scopes,
        interceptors: interceptors,
        &<% = service.ruby_namespace %>::<% = service.name %>::Stub.method(:new)
      )

      <% service.rpcs.each do |rpc| -%>
        @<% = rpc.name.snake_case %> = Google::Gax.create_api_call(
          @<% service.name.snake_case %>_stub.method(:<% = rpc.name.snake_case %>),
          defaults["<% = rpc.name.snake_case %>"],
          exception_transformer: exception_transformer
        )
      <% end -%>
    end

    # Service calls
    <% service.rpcs.each do |rpc| %>
      # <%= rpc.description %>
      #
      <% rpc.arguments.each do |arg| -%>
        # @param <%= arg.name.snake_case %> [<%= arg.ruby_type %> | Hash]
        #   <%= arg.description %>
      <% end -%>
      # @yield [result, operation] Access the result along with the RPC operation
      # @yieldparam result [<%= rpc.response.ruby_type %>]
      # @yieldparam operation [GRPC::ActiveCall::Operation]
      # @return [<%= rpc.response.ruby_type %>]
      # @raise [Google::Gax::GaxError] if the RPC is aborted.
      # @example
      #   <%= rpc.example_code %>
      def <%= rpc.name.snake_case %> \
        <% rpc.arguments.each do |arg| -%>
          <% if arg.optional? -%>
            <%= arg.name.snake_case %>: nil,
          <% else -%>
            <%= arg.name.snake_case %>,
          <% end -%>
        <% end -%>
          options: nil,
          &block
        req = {
        <% rpc.arguments.each do |arg| -%>
          <%= arg.name.snake_case %>: <%= arg.name.snake_case %>,
        <% end -%>
        }.delete_if { |_, v| v.nil? }
        req = Google::Gax::to_proto(req, <%= rpc.response.ruby_type %>)
        @recognize.call(req, options, &block)
      end
    <% end %>

    <% if service.lro? -%>
      <% # we should implement get_operation and list_operations -%>
    <% end -%>
  end
<% end %>
