# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby v0.0.1.dev.1. DO NOT EDIT!

require "minitest/autorun"

require "garbage/garbage_pb"
require "garbage/garbage_services_pb"
require "so/much/trash/garbage_service"

class CustomTestErrorV1 < StandardError; end
# Mock for the GRPC::ClientStub class.
class MockGrpcClientStubV1
  # @param expected_symbol [Symbol] the symbol of the grpc method to be mocked.
  # @param mock_method [Proc] The method that is being mocked.
  def initialize expected_symbol, mock_method
    @expected_symbol = expected_symbol
    @mock_method = mock_method
  end

  # This overrides the Object#method method to return the mocked method when the mocked method
  # is being requested. For methods that aren"t being tested, this method returns a proc that
  # will raise an error when called. This is to assure that only the mocked grpc method is being
  # called.
  #
  # @param symbol [Symbol] The symbol of the method being requested.
  # @return [Proc] The proc of the requested method. If the requested method is not being mocked
  #   the proc returned will raise when called.
  def method symbol
    return @mock_method if symbol == @expected_symbol

    # The requested method is not being tested, raise if it called.
    proc do
      raise "The method #{symbol} was unexpectedly called during the " \
        "test for #{@expected_symbol}."
    end
  end
end

class MockGarbageServiceCredentialsForever < So::Much::Trash::GarbageService::Credentials
  def initialize method_name
    @method_name = method_name
  end

  def updater_proc
    proc do
      raise "The method `#{@method_name}` was trying to make a grpc request. This should not " \
          "happen since the grpc layer is being mocked."
    end
  end
end

describe So::Much::Trash::GarbageService::Client do
  describe "get_simple_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#get_simple_garbage."
    end

    it "invokes get_simple_garbage without error" do
      # Create request parameters
      name = "hello world"

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::SimpleGarbage

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::SimpleGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :get_simple_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_simple_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.get_simple_garbage name

          # Verify the response
          assert_equal expected_response, response

          # Call method with block
          client.get_simple_garbage name do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
        end
      end
    end

    it "invokes get_simple_garbage with error" do
      # Create request parameters
      name = "hello world"

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::SimpleGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :get_simple_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_simple_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.get_simple_garbage name
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "get_specific_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#get_specific_garbage."
    end

    it "invokes get_specific_garbage without error" do
      # Create request parameters
      name = "hello world"
      int32 = 42
      int64 = 42
      uint32 = 42
      uint64 = 42
      bool = true
      float = 3.14
      double = 3.14
      bytes = "hello world"
      msg = {}
      enum = Default
      nested = {}

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::SpecificGarbage

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::SpecificGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        assert_equal Gapic::Protobuf.coerce(int32, to: ), request.int32
        assert_equal Gapic::Protobuf.coerce(int64, to: ), request.int64
        assert_equal Gapic::Protobuf.coerce(uint32, to: ), request.uint32
        assert_equal Gapic::Protobuf.coerce(uint64, to: ), request.uint64
        assert_equal Gapic::Protobuf.coerce(bool, to: ), request.bool
        assert_equal Gapic::Protobuf.coerce(float, to: ), request.float
        assert_equal Gapic::Protobuf.coerce(double, to: ), request.double
        assert_equal Gapic::Protobuf.coerce(bytes, to: ), request.bytes
        assert_equal Gapic::Protobuf.coerce(msg, to: So::Much::Trash::GarbageMap), request.msg
        assert_equal Gapic::Protobuf.coerce(enum, to: So::Much::Trash::GarbageEnum), request.enum
        assert_equal Gapic::Protobuf.coerce(nested, to: So::Much::Trash::SpecificGarbage::NestedGarbage), request.nested
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :get_specific_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_specific_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.get_specific_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, msg, enum, nested

          # Verify the response
          assert_equal expected_response, response

          # Call method with block
          client.get_specific_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, msg, enum, nested do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
        end
      end
    end

    it "invokes get_specific_garbage with error" do
      # Create request parameters
      name = "hello world"
      int32 = 42
      int64 = 42
      uint32 = 42
      uint64 = 42
      bool = true
      float = 3.14
      double = 3.14
      bytes = "hello world"
      msg = {}
      enum = Default
      nested = {}

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::SpecificGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        assert_equal Gapic::Protobuf.coerce(int32, to: ), request.int32
        assert_equal Gapic::Protobuf.coerce(int64, to: ), request.int64
        assert_equal Gapic::Protobuf.coerce(uint32, to: ), request.uint32
        assert_equal Gapic::Protobuf.coerce(uint64, to: ), request.uint64
        assert_equal Gapic::Protobuf.coerce(bool, to: ), request.bool
        assert_equal Gapic::Protobuf.coerce(float, to: ), request.float
        assert_equal Gapic::Protobuf.coerce(double, to: ), request.double
        assert_equal Gapic::Protobuf.coerce(bytes, to: ), request.bytes
        assert_equal Gapic::Protobuf.coerce(msg, to: So::Much::Trash::GarbageMap), request.msg
        assert_equal Gapic::Protobuf.coerce(enum, to: So::Much::Trash::GarbageEnum), request.enum
        assert_equal Gapic::Protobuf.coerce(nested, to: So::Much::Trash::SpecificGarbage::NestedGarbage), request.nested
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :get_specific_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_specific_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.get_specific_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, msg, enum, nested
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "get_nested_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#get_nested_garbage."
    end

    it "invokes get_nested_garbage without error" do
      # Create request parameters
      name = "hello world"
      int32 = 42
      int64 = 42
      uint32 = 42
      uint64 = 42
      bool = true
      float = 3.14
      double = 3.14
      bytes = "hello world"
      msg = {}
      enum = Default

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::SpecificGarbage::NestedGarbage

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::SpecificGarbage::NestedGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        assert_equal Gapic::Protobuf.coerce(int32, to: ), request.int32
        assert_equal Gapic::Protobuf.coerce(int64, to: ), request.int64
        assert_equal Gapic::Protobuf.coerce(uint32, to: ), request.uint32
        assert_equal Gapic::Protobuf.coerce(uint64, to: ), request.uint64
        assert_equal Gapic::Protobuf.coerce(bool, to: ), request.bool
        assert_equal Gapic::Protobuf.coerce(float, to: ), request.float
        assert_equal Gapic::Protobuf.coerce(double, to: ), request.double
        assert_equal Gapic::Protobuf.coerce(bytes, to: ), request.bytes
        assert_equal Gapic::Protobuf.coerce(msg, to: So::Much::Trash::GarbageMap), request.msg
        assert_equal Gapic::Protobuf.coerce(enum, to: So::Much::Trash::GarbageEnum), request.enum
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :get_nested_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_nested_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.get_nested_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, msg, enum

          # Verify the response
          assert_equal expected_response, response

          # Call method with block
          client.get_nested_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, msg, enum do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
        end
      end
    end

    it "invokes get_nested_garbage with error" do
      # Create request parameters
      name = "hello world"
      int32 = 42
      int64 = 42
      uint32 = 42
      uint64 = 42
      bool = true
      float = 3.14
      double = 3.14
      bytes = "hello world"
      msg = {}
      enum = Default

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::SpecificGarbage::NestedGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        assert_equal Gapic::Protobuf.coerce(int32, to: ), request.int32
        assert_equal Gapic::Protobuf.coerce(int64, to: ), request.int64
        assert_equal Gapic::Protobuf.coerce(uint32, to: ), request.uint32
        assert_equal Gapic::Protobuf.coerce(uint64, to: ), request.uint64
        assert_equal Gapic::Protobuf.coerce(bool, to: ), request.bool
        assert_equal Gapic::Protobuf.coerce(float, to: ), request.float
        assert_equal Gapic::Protobuf.coerce(double, to: ), request.double
        assert_equal Gapic::Protobuf.coerce(bytes, to: ), request.bytes
        assert_equal Gapic::Protobuf.coerce(msg, to: So::Much::Trash::GarbageMap), request.msg
        assert_equal Gapic::Protobuf.coerce(enum, to: So::Much::Trash::GarbageEnum), request.enum
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :get_nested_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_nested_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.get_nested_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, msg, enum
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "get_repeated_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#get_repeated_garbage."
    end

    it "invokes get_repeated_garbage without error" do
      # Create request parameters
      repeated_name = "hello world"
      repeated_int32 = 42
      repeated_int64 = 42
      repeated_uint32 = 42
      repeated_uint64 = 42
      repeated_bool = true
      repeated_float = 3.14
      repeated_double = 3.14
      repeated_bytes = "hello world"
      repeated_msg = {}
      repeated_enum = Default

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::RepeatedGarbage

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::RepeatedGarbage, request
        assert_equal Gapic::Protobuf.coerce(repeated_name, to: ), request.repeated_name
        assert_equal Gapic::Protobuf.coerce(repeated_int32, to: ), request.repeated_int32
        assert_equal Gapic::Protobuf.coerce(repeated_int64, to: ), request.repeated_int64
        assert_equal Gapic::Protobuf.coerce(repeated_uint32, to: ), request.repeated_uint32
        assert_equal Gapic::Protobuf.coerce(repeated_uint64, to: ), request.repeated_uint64
        assert_equal Gapic::Protobuf.coerce(repeated_bool, to: ), request.repeated_bool
        assert_equal Gapic::Protobuf.coerce(repeated_float, to: ), request.repeated_float
        assert_equal Gapic::Protobuf.coerce(repeated_double, to: ), request.repeated_double
        assert_equal Gapic::Protobuf.coerce(repeated_bytes, to: ), request.repeated_bytes
        assert_equal Gapic::Protobuf.coerce(repeated_msg, to: So::Much::Trash::GarbageMap), request.repeated_msg
        assert_equal Gapic::Protobuf.coerce(repeated_enum, to: So::Much::Trash::GarbageEnum), request.repeated_enum
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :get_repeated_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_repeated_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.get_repeated_garbage repeated_name, repeated_int32, repeated_int64, repeated_uint32, repeated_uint64, repeated_bool, repeated_float, repeated_double, repeated_bytes, repeated_msg, repeated_enum

          # Verify the response
          assert_equal expected_response, response

          # Call method with block
          client.get_repeated_garbage repeated_name, repeated_int32, repeated_int64, repeated_uint32, repeated_uint64, repeated_bool, repeated_float, repeated_double, repeated_bytes, repeated_msg, repeated_enum do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
        end
      end
    end

    it "invokes get_repeated_garbage with error" do
      # Create request parameters
      repeated_name = "hello world"
      repeated_int32 = 42
      repeated_int64 = 42
      repeated_uint32 = 42
      repeated_uint64 = 42
      repeated_bool = true
      repeated_float = 3.14
      repeated_double = 3.14
      repeated_bytes = "hello world"
      repeated_msg = {}
      repeated_enum = Default

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::RepeatedGarbage, request
        assert_equal Gapic::Protobuf.coerce(repeated_name, to: ), request.repeated_name
        assert_equal Gapic::Protobuf.coerce(repeated_int32, to: ), request.repeated_int32
        assert_equal Gapic::Protobuf.coerce(repeated_int64, to: ), request.repeated_int64
        assert_equal Gapic::Protobuf.coerce(repeated_uint32, to: ), request.repeated_uint32
        assert_equal Gapic::Protobuf.coerce(repeated_uint64, to: ), request.repeated_uint64
        assert_equal Gapic::Protobuf.coerce(repeated_bool, to: ), request.repeated_bool
        assert_equal Gapic::Protobuf.coerce(repeated_float, to: ), request.repeated_float
        assert_equal Gapic::Protobuf.coerce(repeated_double, to: ), request.repeated_double
        assert_equal Gapic::Protobuf.coerce(repeated_bytes, to: ), request.repeated_bytes
        assert_equal Gapic::Protobuf.coerce(repeated_msg, to: So::Much::Trash::GarbageMap), request.repeated_msg
        assert_equal Gapic::Protobuf.coerce(repeated_enum, to: So::Much::Trash::GarbageEnum), request.repeated_enum
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :get_repeated_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_repeated_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.get_repeated_garbage repeated_name, repeated_int32, repeated_int64, repeated_uint32, repeated_uint64, repeated_bool, repeated_float, repeated_double, repeated_bytes, repeated_msg, repeated_enum
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "get_typical_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#get_typical_garbage."
    end

    it "invokes get_typical_garbage without error" do
      # Create request parameters
      name = "hello world"
      int32 = 42
      int64 = 42
      uint32 = 42
      uint64 = 42
      bool = true
      float = 3.14
      double = 3.14
      bytes = "hello world"
      timeout = {}
      duration = {}
      msg = {}
      enum = Default

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::TypicalGarbage

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::TypicalGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        assert_equal Gapic::Protobuf.coerce(int32, to: ), request.int32
        assert_equal Gapic::Protobuf.coerce(int64, to: ), request.int64
        assert_equal Gapic::Protobuf.coerce(uint32, to: ), request.uint32
        assert_equal Gapic::Protobuf.coerce(uint64, to: ), request.uint64
        assert_equal Gapic::Protobuf.coerce(bool, to: ), request.bool
        assert_equal Gapic::Protobuf.coerce(float, to: ), request.float
        assert_equal Gapic::Protobuf.coerce(double, to: ), request.double
        assert_equal Gapic::Protobuf.coerce(bytes, to: ), request.bytes
        assert_equal Gapic::Protobuf.coerce(timeout, to: Google::Protobuf::Timestamp), request.timeout
        assert_equal Gapic::Protobuf.coerce(duration, to: Google::Protobuf::Duration), request.duration
        assert_equal Gapic::Protobuf.coerce(msg, to: So::Much::Trash::GarbageMap), request.msg
        assert_equal Gapic::Protobuf.coerce(enum, to: So::Much::Trash::GarbageEnum), request.enum
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :get_typical_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_typical_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.get_typical_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, timeout, duration, msg, enum

          # Verify the response
          assert_equal expected_response, response

          # Call method with block
          client.get_typical_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, timeout, duration, msg, enum do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
        end
      end
    end

    it "invokes get_typical_garbage with error" do
      # Create request parameters
      name = "hello world"
      int32 = 42
      int64 = 42
      uint32 = 42
      uint64 = 42
      bool = true
      float = 3.14
      double = 3.14
      bytes = "hello world"
      timeout = {}
      duration = {}
      msg = {}
      enum = Default

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::TypicalGarbage, request
        assert_equal Gapic::Protobuf.coerce(name, to: ), request.name
        assert_equal Gapic::Protobuf.coerce(int32, to: ), request.int32
        assert_equal Gapic::Protobuf.coerce(int64, to: ), request.int64
        assert_equal Gapic::Protobuf.coerce(uint32, to: ), request.uint32
        assert_equal Gapic::Protobuf.coerce(uint64, to: ), request.uint64
        assert_equal Gapic::Protobuf.coerce(bool, to: ), request.bool
        assert_equal Gapic::Protobuf.coerce(float, to: ), request.float
        assert_equal Gapic::Protobuf.coerce(double, to: ), request.double
        assert_equal Gapic::Protobuf.coerce(bytes, to: ), request.bytes
        assert_equal Gapic::Protobuf.coerce(timeout, to: Google::Protobuf::Timestamp), request.timeout
        assert_equal Gapic::Protobuf.coerce(duration, to: Google::Protobuf::Duration), request.duration
        assert_equal Gapic::Protobuf.coerce(msg, to: So::Much::Trash::GarbageMap), request.msg
        assert_equal Gapic::Protobuf.coerce(enum, to: So::Much::Trash::GarbageEnum), request.enum
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :get_typical_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_typical_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.get_typical_garbage name, int32, int64, uint32, uint64, bool, float, double, bytes, timeout, duration, msg, enum
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "get_complex_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#get_complex_garbage."
    end

    it "invokes get_complex_garbage without error" do
      # Create request parameters
      layer1 = {}

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::ComplexGarbage

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::ComplexGarbage, request
        assert_equal Gapic::Protobuf.coerce(layer1, to: So::Much::Trash::ComplexGarbage::Layer1Garbage), request.layer1
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :get_complex_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_complex_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.get_complex_garbage layer1

          # Verify the response
          assert_equal expected_response, response

          # Call method with block
          client.get_complex_garbage layer1 do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
        end
      end
    end

    it "invokes get_complex_garbage with error" do
      # Create request parameters
      layer1 = {}

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::ComplexGarbage, request
        assert_equal Gapic::Protobuf.coerce(layer1, to: So::Much::Trash::ComplexGarbage::Layer1Garbage), request.layer1
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :get_complex_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_complex_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.get_complex_garbage layer1
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "get_paged_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#get_paged_garbage."
    end

    it "invokes get_paged_garbage without error" do
      # Create request parameters
      garbage = "hello world"
      page_size = 42
      page_token = "hello world"

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::PagedGarbageResponse

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::PagedGarbageRequest, request
        assert_equal Gapic::Protobuf.coerce(garbage, to: ), request.garbage
        assert_equal Gapic::Protobuf.coerce(page_size, to: ), request.page_size
        assert_equal Gapic::Protobuf.coerce(page_token, to: ), request.page_token
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :get_paged_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_paged_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.get_paged_garbage garbage, page_size, page_token

          # Verify the response
          assert_equal expected_response, response

          # Call method with block
          client.get_paged_garbage garbage, page_size, page_token do |resp, operation|
            # Verify the response
            assert_equal expected_response, resp
            refute_nil operation
          end
        end
      end
    end

    it "invokes get_paged_garbage with error" do
      # Create request parameters
      garbage = "hello world"
      page_size = 42
      page_token = "hello world"

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::PagedGarbageRequest, request
        assert_equal Gapic::Protobuf.coerce(garbage, to: ), request.garbage
        assert_equal Gapic::Protobuf.coerce(page_size, to: ), request.page_size
        assert_equal Gapic::Protobuf.coerce(page_token, to: ), request.page_token
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :get_paged_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "get_paged_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.get_paged_garbage garbage, page_size, page_token
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "long_running_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#long_running_garbage."
    end

    it "invokes long_running_garbage without error" do
      # Create request parameters
      garbage = "hello world"

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: Google::Longrunning::Operation
      result = Google::Protobuf::Any.new
      result.pack expected_response
      operation = Google::Longrunning::Operation.new(
        name: "operations/long_running_garbage_test",
        done: true,
        response: result
      )

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::LongRunningGarbageRequest, request
        assert_equal Gapic::Protobuf.coerce(garbage, to: ), request.garbage
        OpenStruct.new execute: operation
      end
      mock_stub = MockGrpcClientStubV1.new :long_running_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "long_running_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.long_running_garbage garbage

          # Verify the response
          assert_equal expected_response, response.response
        end
      end
    end

    it "invokes long_running_garbage and returns an operation error." do
      # Create request parameters
      garbage = "hello world"

      # Create expected grpc response
      operation_error = Google::Rpc::Status.new(
        message: "Operation error for So::Much::Trash::GarbageService::Client#long_running_garbage."
      )
      operation = Google::Longrunning::Operation.new(
        name: "operations/long_running_garbage_test",
        done: true,
        error: operation_error
      )

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::LongRunningGarbageRequest, request
        assert_equal Gapic::Protobuf.coerce(garbage, to: ), request.garbage
        OpenStruct.new execute: operation
      end
      mock_stub = MockGrpcClientStubV1.new :long_running_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "long_running_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.long_running_garbage garbage

          # Verify the response
          assert response.error?
          assert_equal operation_error, response.error
        end
      end
    end

    it "invokes long_running_garbage with error" do
      # Create request parameters
      garbage = "hello world"

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::LongRunningGarbageRequest, request
        assert_equal Gapic::Protobuf.coerce(garbage, to: ), request.garbage
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :long_running_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "long_running_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.long_running_garbage garbage
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "client_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#client_garbage."
    end

    it "invokes client_garbage without error" do
      # Create request parameters
      request = {}

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::ListGarbageResponse

      # Mock Grpc layer
      mock_method = proc do |requests|
        request = requests.first
        OpenStruct.new execute: [expected_response]
      end
      mock_stub = MockGrpcClientStubV1.new :client_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "client_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.client_garbage [request]

          # Verify the response
          assert_equal expected_response, response
        end
      end
    end

    it "invokes client_garbage with error" do
      # Create request parameters
      request = {}

      # Mock Grpc layer
      mock_method = proc { raise custom_error }
      mock_stub = MockGrpcClientStubV1.new :client_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "client_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.client_garbage [request]
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "server_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#server_garbage."
    end

    it "invokes server_garbage without error" do
      # Create request parameters
      garbage = "hello world"

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::GarbageItem

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::ListGarbageRequest, request
        assert_equal Gapic::Protobuf.coerce(garbage, to: ), request.garbage
        OpenStruct.new execute: expected_response
      end
      mock_stub = MockGrpcClientStubV1.new :server_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "server_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.server_garbage [request]

          # Verify the response
          assert_equal 1, response.count
          assert_equal expected_response, response.first
        end
      end
    end

    it "invokes server_garbage with error" do
      # Create request parameters
      garbage = "hello world"

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of So::Much::Trash::ListGarbageRequest, request
        assert_equal Gapic::Protobuf.coerce(garbage, to: ), request.garbage
        raise custom_error
      end
      mock_stub = MockGrpcClientStubV1.new :server_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "server_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.server_garbage garbage
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end

  describe "bidi_garbage" do
    let :custom_error do
      CustomTestErrorV1.new "Custom test error for So::Much::Trash::GarbageService::Client#bidi_garbage."
    end

    it "invokes bidi_garbage without error" do
      # Create request parameters
      request = {}

      # Create expected grpc response
      expected_response = {}
      expected_response = Gapic::Protobuf.coerce expected_response, to: So::Much::Trash::GarbageItem

      # Mock Grpc layer
      mock_method = proc do |requests|
        request = requests.first
        OpenStruct.new execute: [expected_response]
      end
      mock_stub = MockGrpcClientStubV1.new :bidi_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "bidi_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          response = client.bidi_garbage [request]

          # Verify the response
          assert_equal 1, response.count
          assert_equal expected_response, response.first
        end
      end
    end

    it "invokes bidi_garbage with error" do
      # Create request parameters
      request = {}

      # Mock Grpc layer
      mock_method = proc { raise custom_error }
      mock_stub = MockGrpcClientStubV1.new :bidi_garbage, mock_method

      # Mock auth layer
      mock_credentials = MockSpeechCredentialsV1.new "bidi_garbage"

      So::Much::Trash::GarbageService::Stub.stub :new, mock_stub do
        So::Much::Trash::GarbageService::Credentials.stub :default, mock_credentials do
          client = So::Much::Trash::GarbageService::Client.new

          # Call method
          err = assert_raises GRPC::BadStatus do
            client.bidi_garbage [request]
          end

          # Verify the GapicError wrapped the custom error that was raised.
          assert_match custom_error.message, err.message
        end
      end
    end
  end
end
