# frozen_string_literal: true

# The MIT License (MIT)
#
# Copyright <YEAR> <COPYRIGHT HOLDER>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Auto-generated by gapic-generator-ruby v0.0.1.dev.1. DO NOT EDIT!


module Google
  module Cloud
    module Vision
      module V1
        module ProductSearch
          module Paths
            ##
            # Create a fully-qualified Product resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/products/{product}`
            #
            # @param project [String]
            # @param location [String]
            # @param product [String]
            #
            # @return [String]
            def product_path project:, location:, product:
              raise ArgumentError, "project is required" if project.nil?
              raise ArgumentError, "project cannot contain /" if %r{/}.match? project
              raise ArgumentError, "location is required" if location.nil?
              raise ArgumentError, "location cannot contain /" if %r{/}.match? location
              raise ArgumentError, "product is required" if product.nil?

              "projects/#{project}/locations/#{location}/products/#{product}"
            end

            ##
            # Create a fully-qualified ProductSet resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/productSets/{product_set}`
            #
            # @param project [String]
            # @param location [String]
            # @param product_set [String]
            #
            # @return [String]
            def product_set_path project:, location:, product_set:
              raise ArgumentError, "project is required" if project.nil?
              raise ArgumentError, "project cannot contain /" if %r{/}.match? project
              raise ArgumentError, "location is required" if location.nil?
              raise ArgumentError, "location cannot contain /" if %r{/}.match? location
              raise ArgumentError, "product_set is required" if product_set.nil?

              "projects/#{project}/locations/#{location}/productSets/#{product_set}"
            end

            ##
            # Create a fully-qualified ReferenceImage resource string.
            #
            # The resource will be in the following format:
            #
            # `projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}`
            #
            # @param project [String]
            # @param location [String]
            # @param product [String]
            # @param reference_image [String]
            #
            # @return [String]
            def reference_image_path project:, location:, product:, reference_image:
              raise ArgumentError, "project is required" if project.nil?
              raise ArgumentError, "project cannot contain /" if %r{/}.match? project
              raise ArgumentError, "location is required" if location.nil?
              raise ArgumentError, "location cannot contain /" if %r{/}.match? location
              raise ArgumentError, "product is required" if product.nil?
              raise ArgumentError, "product cannot contain /" if %r{/}.match? product
              raise ArgumentError, "reference_image is required" if reference_image.nil?

              "projects/#{project}/locations/#{location}/products/#{product}/referenceImages/#{reference_image}"
            end
          end
        end
      end
    end
  end
end
