syntax = "proto3";

package endless.trash.forever;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/timestamp.proto";

option (google.api.client_package) = {
  title: "Testing Garbage"
  namespace: ["Endless", "Trash"]
  version: "Forever"
};

// Endless trash
service GarbageService {
  // The address where this API is typically served.
  option (google.api.default_host) = "endlesstrash.example.net";

  // The OAuth scopes needed to make requests to this API.
  option (google.api.oauth_scopes) = "https://endlesstrash.example.net/garbage-admin,"
                                     "https://endlesstrash.example.net/garbage-read,"
                                     "https://endlesstrash.example.net/garbage-write";

  rpc GetSimpleGarbage(SimpleGarbage) returns (SimpleGarbage) {
    option (google.api.http) = {
      post: "/v1/simple_garbage:get"
      body: "*"
    };
  }
  rpc GetSpecificGarbage(SpecificGarbage) returns (SpecificGarbage) {
    option (google.api.http) = {
      post: "/v1/specific_garbage:get"
      body: "*"
    };
    option (google.api.method_signature) = "name,int32,bool";
    option (google.api.method_signature) = "name,nested.int64";
  }
  rpc GetNestedGarbage(SpecificGarbage.NestedGarbage) returns (SpecificGarbage.NestedGarbage) {
    option (google.api.http) = {
      post: "/v1/nested_garbage:get"
      body: "*"
    };
    option (google.api.method_signature) = "name,int32,int64";
    option (google.api.method_signature) = "name,float,double";
    option (google.api.method_signature) = "name,bool,enum";
  }
  rpc GetRepeatedGarbage(RepeatedGarbage) returns (RepeatedGarbage) {
    option (google.api.http) = {
      post: "/v1/repeated_garbage:get"
      body: "*"
    };
    option (google.api.method_signature) = "name,bool,enum";
    option (google.api.method_signature) = "name,float,double";
    option (google.api.method_signature) = "name,int32,int64,uint32,uint64";
  }
  rpc LongRunningGarbage(LongRunningGarbageRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/garbage:lro"
      body: "*"
    };
    // Once the operation is complete, the ultimate result
    // will be a LongRunningGarbageResponse.
    option (google.longrunning.operation_info) = {
      response_type: "google.garbage.v1.LongRunningGarbageResponse"
      metadata_type: "google.garbage.v1.LongRunningGarbageMetadata"
    };
  }
  rpc ClientGarbage(ListGarbageRequest) returns (stream GarbageItem) {
    option (google.api.http) = {
      post: "/v1/garbage:client"
      body: "*"
    };
  }
  rpc ServerGarbage(stream ListGarbageRequest) returns (ListGarbageResponse) {
    option (google.api.http) = {
      post: "/v1/garbage:server"
      body: "*"
    };
  }
  rpc BidiGarbage(stream ListGarbageRequest) returns (stream GarbageItem);
}

message LongRunningGarbageRequest {
  string garbage = 1;
}

message LongRunningGarbageResponse {
  string garbage = 1;
  repeated GarbageItem items = 2;
}

message LongRunningGarbageMetadata {
  // Approximate percentage of garbage processed thus far. Guaranteed to be 100
  // when the garbage is fully processed and the items are available.
  int32 progress_percent = 1;

  // Time when the request was received.
  google.protobuf.Timestamp start_time = 2;

  // Time of the most recent processing update.
  google.protobuf.Timestamp last_update_time = 3;
}

message ListGarbageRequest {
  string garbage = 1;
}

message ListGarbageResponse {
  string garbage = 1;
  repeated GarbageItem items = 2;
}

message GarbageItem {
  string garbage = 1;
  oneof item {
    string a = 2;
    int32  b = 3;
  }
}

// A simple garbage resource
message SimpleGarbage {
  string name = 1 [(google.api.resource) = {
    pattern: "projects/{project}/simple_garbage/{garbage}"
  }];
}

// A simple garbage item resource
message SimpleGarbageItem {
  string garbage = 1 [
    (google.api.resource_reference) = "SimpleGarbage"];
  oneof item {
    string a = 2;
    int32  b = 3;
  }
}

message TypicalGarbage {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  int32 int32 = 2 [(google.api.field_behavior) = REQUIRED];
  int64 int64 = 3;
  uint32 uint32 = 4;
  uint64 uint64 = 5;
  bool bool = 6 [(google.api.field_behavior) = REQUIRED];
  float float = 7;
  double double = 8;
  bytes bytes = 9;
  GarbageMap msg = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  GarbageEnum enum = 11;
}

message SpecificGarbage {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  int32 int32 = 2;
  int64 int64 = 3;
  uint32 uint32 = 4;
  uint64 uint64 = 5;
  bool bool = 6;
  float float = 7;
  double double = 8;
  bytes bytes = 9;
  GarbageMap msg = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  GarbageEnum enum = 11;
  NestedGarbage nested = 12;

  message NestedGarbage {
    string name = 1 [(google.api.field_behavior) = REQUIRED];
    int32 int32 = 2;
    int64 int64 = 3;
    uint32 uint32 = 4;
    uint64 uint64 = 5;
    bool bool = 6;
    float float = 7;
    double double = 8;
    bytes bytes = 9;
    GarbageMap msg = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
    GarbageEnum enum = 11;
  }
}

message RepeatedGarbage {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  repeated int32 repeated_int32 = 12;
  repeated int64 repeated_int64 = 13;
  repeated uint32 repeated_uint32 = 14;
  repeated uint64 repeated_uint64 = 15;
  repeated bool repeated_bool = 16;
  repeated float repeated_float = 17;
  repeated double repeated_double = 18;
  repeated string repeated_string = 19;
  repeated bytes repeated_bytes = 20;
  repeated GarbageMap repeated_msg = 21 [(google.api.field_behavior) = OUTPUT_ONLY];
  repeated GarbageEnum repeated_enum = 22;
}

enum GarbageEnum {
  Default = 0;
  Bag = 1;
  Heap = 2;
  Dumpster = 3;
}

message GarbageMap {
  map<string, int32> map_string_int32 = 1;
  map<string, SimpleGarbage> map_string_msg = 2;
}
