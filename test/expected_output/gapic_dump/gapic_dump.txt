Message: Http
  Leading Comments: " Defines the HTTP configuration for an API service. It contains a list of\n [HttpRule][google.api.HttpRule], each specifying the mapping of an RPC method\n to one or more HTTP REST API methods.\n"
  Trailing Comments: ""
  Address: ["google", "api", "Http"]
  Fields:
    Field: rules
      Leading Comments: " A list of HTTP configuration rules that apply to individual API methods.\n\n **NOTE:** All service configuration rules follow \"last one wins\" order.\n"
      Trailing Comments: ""
      Address: ["google", "api", "Http", "rules"]
      Message: HttpRule
    Field: fully_decode_reserved_expansion
      Leading Comments: " When set to true, URL path parmeters will be fully URI-decoded except in\n cases of single segment matches in reserved expansion, where \"%2F\" will be\n left encoded.\n\n The default behavior is to not decode RFC 6570 reserved characters in multi\n segment matches.\n"
      Trailing Comments: ""
      Address: ["google", "api", "Http", "fully_decode_reserved_expansion"]
      Type: 8

Message: HttpRule
  Leading Comments: " # gRPC Transcoding\n\n gRPC Transcoding is a feature for mapping between a gRPC method and one or\n more HTTP REST endpoints. It allows developers to build a single API service\n that supports both gRPC APIs and REST APIs. Many systems, including [Google\n APIs](https://github.com/googleapis/googleapis),\n [Cloud Endpoints](https://cloud.google.com/endpoints), [gRPC\n Gateway](https://github.com/grpc-ecosystem/grpc-gateway),\n and [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature\n and use it for large scale production services.\n\n `HttpRule` defines the schema of the gRPC/REST mapping. The mapping specifies\n how different portions of the gRPC request message are mapped to the URL\n path, URL query parameters, and HTTP request body. It also controls how the\n gRPC response message is mapped to the HTTP response body. `HttpRule` is\n typically specified as an `google.api.http` annotation on the gRPC method.\n\n Each mapping specifies a URL path template and an HTTP method. The path\n template may refer to one or more fields in the gRPC request message, as long\n as each field is a non-repeated field with a primitive (non-message) type.\n The path template controls how fields of the request message are mapped to\n the URL path.\n\n Example:\n\n     service Messaging {\n       rpc GetMessage(GetMessageRequest) returns (Message) {\n         option (google.api.http) = {\n             get: \"/v1/{name=messages/*}\"\n         };\n       }\n     }\n     message GetMessageRequest {\n       string name = 1; // Mapped to URL path.\n     }\n     message Message {\n       string text = 1; // The resource content.\n     }\n\n This enables an HTTP REST to gRPC mapping as below:\n\n HTTP | gRPC\n -----|-----\n `GET /v1/messages/123456`  | `GetMessage(name: \"messages/123456\")`\n\n Any fields in the request message which are not bound by the path template\n automatically become HTTP query parameters if there is no HTTP request body.\n For example:\n\n     service Messaging {\n       rpc GetMessage(GetMessageRequest) returns (Message) {\n         option (google.api.http) = {\n             get:\"/v1/messages/{message_id}\"\n         };\n       }\n     }\n     message GetMessageRequest {\n       message SubMessage {\n         string subfield = 1;\n       }\n       string message_id = 1; // Mapped to URL path.\n       int64 revision = 2;    // Mapped to URL query parameter `revision`.\n       SubMessage sub = 3;    // Mapped to URL query parameter `sub.subfield`.\n     }\n\n This enables a HTTP JSON to RPC mapping as below:\n\n HTTP | gRPC\n -----|-----\n `GET /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id: \"123456\" revision: 2 sub: SubMessage(subfield: \"foo\"))`\n\n Note that fields which are mapped to URL query parameters must have a\n primitive type or a repeated primitive type or a non-repeated message type.\n In the case of a repeated type, the parameter can be repeated in the URL\n as `...?param=A&param=B`. In the case of a message type, each field of the\n message is mapped to a separate parameter, such as\n `...?foo.a=A&foo.b=B&foo.c=C`.\n\n For HTTP methods that allow a request body, the `body` field\n specifies the mapping. Consider a REST update method on the\n message resource collection:\n\n     service Messaging {\n       rpc UpdateMessage(UpdateMessageRequest) returns (Message) {\n         option (google.api.http) = {\n           patch: \"/v1/messages/{message_id}\"\n           body: \"message\"\n         };\n       }\n     }\n     message UpdateMessageRequest {\n       string message_id = 1; // mapped to the URL\n       Message message = 2;   // mapped to the body\n     }\n\n The following HTTP JSON to RPC mapping is enabled, where the\n representation of the JSON in the request body is determined by\n protos JSON encoding:\n\n HTTP | gRPC\n -----|-----\n `PATCH /v1/messages/123456 { \"text\": \"Hi!\" }` | `UpdateMessage(message_id: \"123456\" message { text: \"Hi!\" })`\n\n The special name `*` can be used in the body mapping to define that\n every field not bound by the path template should be mapped to the\n request body.  This enables the following alternative definition of\n the update method:\n\n     service Messaging {\n       rpc UpdateMessage(Message) returns (Message) {\n         option (google.api.http) = {\n           patch: \"/v1/messages/{message_id}\"\n           body: \"*\"\n         };\n       }\n     }\n     message Message {\n       string message_id = 1;\n       string text = 2;\n     }\n\n\n The following HTTP JSON to RPC mapping is enabled:\n\n HTTP | gRPC\n -----|-----\n `PATCH /v1/messages/123456 { \"text\": \"Hi!\" }` | `UpdateMessage(message_id: \"123456\" text: \"Hi!\")`\n\n Note that when using `*` in the body mapping, it is not possible to\n have HTTP parameters, as all fields not bound by the path end in\n the body. This makes this option more rarely used in practice when\n defining REST APIs. The common usage of `*` is in custom methods\n which don't use the URL at all for transferring data.\n\n It is possible to define multiple HTTP methods for one RPC by using\n the `additional_bindings` option. Example:\n\n     service Messaging {\n       rpc GetMessage(GetMessageRequest) returns (Message) {\n         option (google.api.http) = {\n           get: \"/v1/messages/{message_id}\"\n           additional_bindings {\n             get: \"/v1/users/{user_id}/messages/{message_id}\"\n           }\n         };\n       }\n     }\n     message GetMessageRequest {\n       string message_id = 1;\n       string user_id = 2;\n     }\n\n This enables the following two alternative HTTP JSON to RPC mappings:\n\n HTTP | gRPC\n -----|-----\n `GET /v1/messages/123456` | `GetMessage(message_id: \"123456\")`\n `GET /v1/users/me/messages/123456` | `GetMessage(user_id: \"me\" message_id: \"123456\")`\n\n ## Rules for HTTP mapping\n\n 1. Leaf request fields (recursive expansion nested messages in the request\n    message) are classified into three categories:\n    - Fields referred by the path template. They are passed via the URL path.\n    - Fields referred by the [HttpRule.body][google.api.HttpRule.body]. They are passed via the HTTP\n      request body.\n    - All other fields are passed via the URL query parameters, and the\n      parameter name is the field path in the request message. A repeated\n      field can be represented as multiple query parameters under the same\n      name.\n  2. If [HttpRule.body][google.api.HttpRule.body] is \"*\", there is no URL query parameter, all fields\n     are passed via URL path and HTTP request body.\n  3. If [HttpRule.body][google.api.HttpRule.body] is omitted, there is no HTTP request body, all\n     fields are passed via URL path and URL query parameters.\n\n ### Path template syntax\n\n     Template = \"/\" Segments [ Verb ] ;\n     Segments = Segment { \"/\" Segment } ;\n     Segment  = \"*\" | \"**\" | LITERAL | Variable ;\n     Variable = \"{\" FieldPath [ \"=\" Segments ] \"}\" ;\n     FieldPath = IDENT { \".\" IDENT } ;\n     Verb     = \":\" LITERAL ;\n\n The syntax `*` matches a single URL path segment. The syntax `**` matches\n zero or more URL path segments, which must be the last part of the URL path\n except the `Verb`.\n\n The syntax `Variable` matches part of the URL path as specified by its\n template. A variable template must not contain other variables. If a variable\n matches a single path segment, its template may be omitted, e.g. `{var}`\n is equivalent to `{var=*}`.\n\n The syntax `LITERAL` matches literal text in the URL path. If the `LITERAL`\n contains any reserved character, such characters should be percent-encoded\n before the matching.\n\n If a variable contains exactly one path segment, such as `\"{var}\"` or\n `\"{var=*}\"`, when such a variable is expanded into a URL path on the client\n side, all characters except `[-_.~0-9a-zA-Z]` are percent-encoded. The\n server side does the reverse decoding. Such variables show up in the\n [Discovery Document](https://developers.google.com/discovery/v1/reference/apis)\n as `{var}`.\n\n If a variable contains multiple path segments, such as `\"{var=foo/*}\"`\n or `\"{var=**}\"`, when such a variable is expanded into a URL path on the\n client side, all characters except `[-_.~/0-9a-zA-Z]` are percent-encoded.\n The server side does the reverse decoding, except \"%2F\" and \"%2f\" are left\n unchanged. Such variables show up in the\n [Discovery Document](https://developers.google.com/discovery/v1/reference/apis)\n as `{+var}`.\n\n ## Using gRPC API Service Configuration\n\n gRPC API Service Configuration (service config) is a configuration language\n for configuring a gRPC service to become a user-facing product. The\n service config is simply the YAML representation of the `google.api.Service`\n proto message.\n\n As an alternative to annotating your proto file, you can configure gRPC\n transcoding in your service config YAML files. You do this by specifying a\n `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same\n effect as the proto annotation. This can be particularly useful if you\n have a proto that is reused in multiple services. Note that any transcoding\n specified in the service config will override any matching transcoding\n configuration in the proto.\n\n Example:\n\n     http:\n       rules:\n         # Selects a gRPC method and applies HttpRule to it.\n         - selector: example.v1.Messaging.GetMessage\n           get: /v1/messages/{message_id}/{sub.subfield}\n\n ## Special notes\n\n When gRPC Transcoding is used to map a gRPC to JSON REST endpoints, the\n proto to JSON conversion must follow the [proto3\n specification](https://developers.google.com/protocol-buffers/docs/proto3#json).\n\n While the single segment variable follows the semantics of\n [RFC 6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String\n Expansion, the multi segment variable **does not** follow RFC 6570 Section\n 3.2.3 Reserved Expansion. The reason is that the Reserved Expansion\n does not expand special characters like `?` and `#`, which would lead\n to invalid URLs. As the result, gRPC Transcoding uses a custom encoding\n for multi segment variables.\n\n The path variables **must not** refer to any repeated or mapped field,\n because client libraries are not capable of handling such variable expansion.\n\n The path variables **must not** capture the leading \"/\" character. The reason\n is that the most common use case \"{var}\" does not capture the leading \"/\"\n character. For consistency, all path variables must share the same behavior.\n\n Repeated message fields must not be mapped to URL query parameters, because\n no client library can support such complicated mapping.\n\n If an API needs to use a JSON array for request or response body, it can map\n the request or response body to a repeated field. However, some gRPC\n Transcoding implementations may not support this feature.\n"
  Trailing Comments: ""
  Address: ["google", "api", "HttpRule"]
  Fields:
    Field: selector
      Leading Comments: " Selects a method to which this rule applies.\n\n Refer to [selector][google.api.DocumentationRule.selector] for syntax details.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "selector"]
      Type: 9
    Field: get
      Leading Comments: " Maps to HTTP GET. Used for listing and getting information about\n resources.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "get"]
      Type: 9
    Field: put
      Leading Comments: " Maps to HTTP PUT. Used for replacing a resource.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "put"]
      Type: 9
    Field: post
      Leading Comments: " Maps to HTTP POST. Used for creating a resource or performing an action.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "post"]
      Type: 9
    Field: delete
      Leading Comments: " Maps to HTTP DELETE. Used for deleting a resource.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "delete"]
      Type: 9
    Field: patch
      Leading Comments: " Maps to HTTP PATCH. Used for updating a resource.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "patch"]
      Type: 9
    Field: custom
      Leading Comments: " The custom pattern is used for specifying an HTTP method that is not\n included in the `pattern` field, such as HEAD, or \"*\" to leave the\n HTTP method unspecified for this rule. The wild-card rule is useful\n for services that provide content to Web (HTML) clients.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "custom"]
      Message: CustomHttpPattern
    Field: body
      Leading Comments: " The name of the request field whose value is mapped to the HTTP request\n body, or `*` for mapping all request fields not captured by the path\n pattern to the HTTP body, or omitted for not having any HTTP request body.\n\n NOTE: the referred field must be present at the top-level of the request\n message type.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "body"]
      Type: 9
    Field: response_body
      Leading Comments: " Optional. The name of the response field whose value is mapped to the HTTP\n response body. When omitted, the entire response message will be used\n as the HTTP response body.\n\n NOTE: The referred field must be present at the top-level of the response\n message type.\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "response_body"]
      Type: 9
    Field: additional_bindings
      Leading Comments: " Additional HTTP bindings for the selector. Nested bindings must\n not contain an `additional_bindings` field themselves (that is,\n the nesting may only be one level deep).\n"
      Trailing Comments: ""
      Address: ["google", "api", "HttpRule", "additional_bindings"]
      Message: HttpRule

Message: CustomHttpPattern
  Leading Comments: " A custom pattern is used for defining custom HTTP verb.\n"
  Trailing Comments: ""
  Address: ["google", "api", "CustomHttpPattern"]
  Fields:
    Field: kind
      Leading Comments: " The name of this custom HTTP verb.\n"
      Trailing Comments: ""
      Address: ["google", "api", "CustomHttpPattern", "kind"]
      Type: 9
    Field: path
      Leading Comments: " The path matched by this custom verb.\n"
      Trailing Comments: ""
      Address: ["google", "api", "CustomHttpPattern", "path"]
      Type: 9

Message: FileDescriptorSet
  Leading Comments: " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "FileDescriptorSet"]
  Fields:
    Field: file
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorSet", "file"]
      Message: FileDescriptorProto

Message: FileDescriptorProto
  Leading Comments: " Describes a complete .proto file.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "FileDescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: " file name, relative to root of source tree\n"
      Address: ["google", "protobuf", "FileDescriptorProto", "name"]
      Type: 9
    Field: package
      Leading Comments: ""
      Trailing Comments: " e.g. \"foo\", \"foo.bar\", etc.\n"
      Address: ["google", "protobuf", "FileDescriptorProto", "package"]
      Type: 9
    Field: dependency
      Leading Comments: " Names of files imported by this file.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "dependency"]
      Type: 9
    Field: public_dependency
      Leading Comments: " Indexes of the public imported files in the dependency list above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "public_dependency"]
      Type: 5
    Field: weak_dependency
      Leading Comments: " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "weak_dependency"]
      Type: 5
    Field: message_type
      Leading Comments: " All top-level definitions in this file.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "message_type"]
      Message: DescriptorProto
    Field: enum_type
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "enum_type"]
      Message: EnumDescriptorProto
    Field: service
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "service"]
      Message: ServiceDescriptorProto
    Field: extension
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "extension"]
      Message: FieldDescriptorProto
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "options"]
      Message: FileOptions
    Field: source_code_info
      Leading Comments: " This field contains optional information about the original source code.\n You may safely remove this entire field without harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "source_code_info"]
      Message: SourceCodeInfo
    Field: syntax
      Leading Comments: " The syntax of the proto file.\n The supported values are \"proto2\" and \"proto3\".\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileDescriptorProto", "syntax"]
      Type: 9

Message: DescriptorProto
  Leading Comments: " Describes a message type.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "DescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "name"]
      Type: 9
    Field: field
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "field"]
      Message: FieldDescriptorProto
    Field: extension
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "extension"]
      Message: FieldDescriptorProto
    Field: nested_type
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "nested_type"]
      Message: DescriptorProto
    Field: enum_type
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "enum_type"]
      Message: EnumDescriptorProto
    Field: extension_range
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "extension_range"]
      Message: ExtensionRange
    Field: oneof_decl
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "oneof_decl"]
      Message: OneofDescriptorProto
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "options"]
      Message: MessageOptions
    Field: reserved_range
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "reserved_range"]
      Message: ReservedRange
    Field: reserved_name
      Leading Comments: " Reserved field names, which may not be used by fields in the same message.\n A given name may only be reserved once.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "DescriptorProto", "reserved_name"]
      Type: 9

Message: ExtensionRangeOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "ExtensionRangeOptions"]
  Fields:
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "ExtensionRangeOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: FieldDescriptorProto
  Leading Comments: " Describes a field within a message.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "FieldDescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "name"]
      Type: 9
    Field: number
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "number"]
      Type: 5
    Field: label
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "label"]
      Enum: Label
    Field: type
      Leading Comments: " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "type"]
      Enum: Type
    Field: type_name
      Leading Comments: " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "type_name"]
      Type: 9
    Field: extendee
      Leading Comments: " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "extendee"]
      Type: 9
    Field: default_value
      Leading Comments: " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "default_value"]
      Type: 9
    Field: oneof_index
      Leading Comments: " If set, gives the index of a oneof in the containing type's oneof_decl\n list.  This field is a member of that oneof.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "oneof_index"]
      Type: 5
    Field: json_name
      Leading Comments: " JSON name of this field. The value is set by protocol compiler. If the\n user has set a \"json_name\" option on this field, that option's value\n will be used. Otherwise, it's deduced from the field's name by converting\n it to camelCase.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "json_name"]
      Type: 9
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldDescriptorProto", "options"]
      Message: FieldOptions

Message: OneofDescriptorProto
  Leading Comments: " Describes a oneof.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "OneofDescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "OneofDescriptorProto", "name"]
      Type: 9
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "OneofDescriptorProto", "options"]
      Message: OneofOptions

Message: EnumDescriptorProto
  Leading Comments: " Describes an enum type.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "EnumDescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumDescriptorProto", "name"]
      Type: 9
    Field: value
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumDescriptorProto", "value"]
      Message: EnumValueDescriptorProto
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumDescriptorProto", "options"]
      Message: EnumOptions
    Field: reserved_range
      Leading Comments: " Range of reserved numeric values. Reserved numeric values may not be used\n by enum values in the same enum declaration. Reserved ranges may not\n overlap.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumDescriptorProto", "reserved_range"]
      Message: EnumReservedRange
    Field: reserved_name
      Leading Comments: " Reserved enum value names, which may not be reused. A given name may only\n be reserved once.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumDescriptorProto", "reserved_name"]
      Type: 9

Message: EnumValueDescriptorProto
  Leading Comments: " Describes a value within an enum.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "EnumValueDescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumValueDescriptorProto", "name"]
      Type: 9
    Field: number
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumValueDescriptorProto", "number"]
      Type: 5
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumValueDescriptorProto", "options"]
      Message: EnumValueOptions

Message: ServiceDescriptorProto
  Leading Comments: " Describes a service.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "ServiceDescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "ServiceDescriptorProto", "name"]
      Type: 9
    Field: method
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "ServiceDescriptorProto", "method"]
      Message: MethodDescriptorProto
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "ServiceDescriptorProto", "options"]
      Message: ServiceOptions

Message: MethodDescriptorProto
  Leading Comments: " Describes a method of a service.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "MethodDescriptorProto"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodDescriptorProto", "name"]
      Type: 9
    Field: input_type
      Leading Comments: " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodDescriptorProto", "input_type"]
      Type: 9
    Field: output_type
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodDescriptorProto", "output_type"]
      Type: 9
    Field: options
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodDescriptorProto", "options"]
      Message: MethodOptions
    Field: client_streaming
      Leading Comments: " Identifies if client streams multiple client messages\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodDescriptorProto", "client_streaming"]
      Type: 8
    Field: server_streaming
      Leading Comments: " Identifies if server streams multiple server messages\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodDescriptorProto", "server_streaming"]
      Type: 8

Message: FileOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "FileOptions"]
  Fields:
    Field: java_package
      Leading Comments: " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "java_package"]
      Type: 9
    Field: java_outer_classname
      Leading Comments: " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "java_outer_classname"]
      Type: 9
    Field: java_multiple_files
      Leading Comments: " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "java_multiple_files"]
      Type: 8
    Field: java_generate_equals_and_hash
      Leading Comments: " This option does nothing.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "java_generate_equals_and_hash"]
      Type: 8
    Field: java_string_check_utf8
      Leading Comments: " If set true, then the Java2 code generator will generate code that\n throws an exception whenever an attempt is made to assign a non-UTF-8\n byte sequence to a string field.\n Message reflection will do the same.\n However, an extension field still accepts non-UTF-8 byte sequences.\n This option has no effect on when used with the lite runtime.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "java_string_check_utf8"]
      Type: 8
    Field: optimize_for
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "optimize_for"]
      Enum: OptimizeMode
    Field: go_package
      Leading Comments: " Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "go_package"]
      Type: 9
    Field: cc_generic_services
      Leading Comments: " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "cc_generic_services"]
      Type: 8
    Field: java_generic_services
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "java_generic_services"]
      Type: 8
    Field: py_generic_services
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "py_generic_services"]
      Type: 8
    Field: php_generic_services
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "php_generic_services"]
      Type: 8
    Field: deprecated
      Leading Comments: " Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "deprecated"]
      Type: 8
    Field: cc_enable_arenas
      Leading Comments: " Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "cc_enable_arenas"]
      Type: 8
    Field: objc_class_prefix
      Leading Comments: " Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "objc_class_prefix"]
      Type: 9
    Field: csharp_namespace
      Leading Comments: " Namespace for generated classes; defaults to the package.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "csharp_namespace"]
      Type: 9
    Field: swift_prefix
      Leading Comments: " By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "swift_prefix"]
      Type: 9
    Field: php_class_prefix
      Leading Comments: " Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "php_class_prefix"]
      Type: 9
    Field: php_namespace
      Leading Comments: " Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "php_namespace"]
      Type: 9
    Field: php_metadata_namespace
      Leading Comments: " Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be used\n for determining the namespace.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "php_metadata_namespace"]
      Type: 9
    Field: ruby_package
      Leading Comments: " Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "ruby_package"]
      Type: 9
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FileOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: MessageOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "MessageOptions"]
  Fields:
    Field: message_set_wire_format
      Leading Comments: " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MessageOptions", "message_set_wire_format"]
      Type: 8
    Field: no_standard_descriptor_accessor
      Leading Comments: " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MessageOptions", "no_standard_descriptor_accessor"]
      Type: 8
    Field: deprecated
      Leading Comments: " Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MessageOptions", "deprecated"]
      Type: 8
    Field: map_entry
      Leading Comments: " Whether the message is an automatically generated map entry type for the\n maps field.\n\n For maps fields:\n     map<KeyType, ValueType> map_field = 1;\n The parsed descriptor looks like:\n     message MapFieldEntry {\n         option map_entry = true;\n         optional KeyType key = 1;\n         optional ValueType value = 2;\n     }\n     repeated MapFieldEntry map_field = 1;\n\n Implementations may choose not to generate the map_entry=true message, but\n use a native map in the target language to hold the keys and values.\n The reflection APIs in such implementions still need to work as\n if the field is a repeated message field.\n\n NOTE: Do not set the option in .proto files. Always use the maps syntax\n instead. The option should only be implicitly set by the proto compiler\n parser.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MessageOptions", "map_entry"]
      Type: 8
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MessageOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: FieldOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "FieldOptions"]
  Fields:
    Field: ctype
      Leading Comments: " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldOptions", "ctype"]
      Enum: CType
    Field: packed
      Leading Comments: " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob. In proto3, only explicit setting it to\n false will avoid using packed encoding.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldOptions", "packed"]
      Type: 8
    Field: jstype
      Leading Comments: " The jstype option determines the JavaScript type used for values of the\n field.  The option is permitted only for 64 bit integral and fixed types\n (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING\n is represented as JavaScript string, which avoids loss of precision that\n can happen when a large value is converted to a floating point JavaScript.\n Specifying JS_NUMBER for the jstype causes the generated JavaScript code to\n use the JavaScript \"number\" type.  The behavior of the default option\n JS_NORMAL is implementation dependent.\n\n This option is an enum to permit additional types to be added, e.g.\n goog.math.Integer.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldOptions", "jstype"]
      Enum: JSType
    Field: lazy
      Leading Comments: " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outer message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldOptions", "lazy"]
      Type: 8
    Field: deprecated
      Leading Comments: " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldOptions", "deprecated"]
      Type: 8
    Field: weak
      Leading Comments: " For Google-internal migration only. Do not use.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldOptions", "weak"]
      Type: 8
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "FieldOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: OneofOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "OneofOptions"]
  Fields:
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "OneofOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: EnumOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "EnumOptions"]
  Fields:
    Field: allow_alias
      Leading Comments: " Set this option to true to allow mapping different tag names to the same\n value.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumOptions", "allow_alias"]
      Type: 8
    Field: deprecated
      Leading Comments: " Is this enum deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum, or it will be completely ignored; in the very least, this\n is a formalization for deprecating enums.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumOptions", "deprecated"]
      Type: 8
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: EnumValueOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "EnumValueOptions"]
  Fields:
    Field: deprecated
      Leading Comments: " Is this enum value deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum value, or it will be completely ignored; in the very least,\n this is a formalization for deprecating enum values.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumValueOptions", "deprecated"]
      Type: 8
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "EnumValueOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: ServiceOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "ServiceOptions"]
  Fields:
    Field: deprecated
      Leading Comments: " Is this service deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the service, or it will be completely ignored; in the very least,\n this is a formalization for deprecating services.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "ServiceOptions", "deprecated"]
      Type: 8
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "ServiceOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: MethodOptions
  Leading Comments: ""
  Trailing Comments: ""
  Address: ["google", "protobuf", "MethodOptions"]
  Fields:
    Field: deprecated
      Leading Comments: " Is this method deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the method, or it will be completely ignored; in the very least,\n this is a formalization for deprecating methods.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodOptions", "deprecated"]
      Type: 8
    Field: idempotency_level
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodOptions", "idempotency_level"]
      Enum: IdempotencyLevel
    Field: uninterpreted_option
      Leading Comments: " The parser stores options it doesn't recognize here. See above.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "MethodOptions", "uninterpreted_option"]
      Message: UninterpretedOption

Message: UninterpretedOption
  Leading Comments: " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "UninterpretedOption"]
  Fields:
    Field: name
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "UninterpretedOption", "name"]
      Message: NamePart
    Field: identifier_value
      Leading Comments: " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "UninterpretedOption", "identifier_value"]
      Type: 9
    Field: positive_int_value
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "UninterpretedOption", "positive_int_value"]
      Type: 4
    Field: negative_int_value
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "UninterpretedOption", "negative_int_value"]
      Type: 3
    Field: double_value
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "UninterpretedOption", "double_value"]
      Type: 1
    Field: string_value
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "UninterpretedOption", "string_value"]
      Type: 12
    Field: aggregate_value
      Leading Comments: ""
      Trailing Comments: ""
      Address: ["google", "protobuf", "UninterpretedOption", "aggregate_value"]
      Type: 9

Message: SourceCodeInfo
  Leading Comments: " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "SourceCodeInfo"]
  Fields:
    Field: location
      Leading Comments: " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "SourceCodeInfo", "location"]
      Message: Location

Message: GeneratedCodeInfo
  Leading Comments: " Describes the relationship between generated code and its original source\n file. A GeneratedCodeInfo message is associated with only one generated\n source file, but may contain references to different source .proto files.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "GeneratedCodeInfo"]
  Fields:
    Field: annotation
      Leading Comments: " An Annotation connects some span of text in generated code to an element\n of its generating .proto file.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "GeneratedCodeInfo", "annotation"]
      Message: Annotation

Message: Any
  Leading Comments: " `Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(&foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := &pb.Foo{...}\n      any, err := ptypes.MarshalAny(foo)\n      ...\n      foo := &pb.Foo{}\n      if err := ptypes.UnmarshalAny(any, foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": <string>,\n       \"lastName\": <string>\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }\n\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "Any"]
  Fields:
    Field: type_url
      Leading Comments: " A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics.\n\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "Any", "type_url"]
      Type: 9
    Field: value
      Leading Comments: " Must be a valid serialized protocol buffer of the above specified type.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "Any", "value"]
      Type: 12

Message: Empty
  Leading Comments: " A generic empty message that you can re-use to avoid defining duplicated\n empty messages in your APIs. A typical example is to use it as the request\n or the response type of an API method. For instance:\n\n     service Foo {\n       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n     }\n\n The JSON representation for `Empty` is empty JSON object `{}`.\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "Empty"]
  Fields:

Message: Status
  Leading Comments: " The `Status` type defines a logical error model that is suitable for different\n programming environments, including REST APIs and RPC APIs. It is used by\n [gRPC](https://github.com/grpc). The error model is designed to be:\n\n - Simple to use and understand for most users\n - Flexible enough to meet unexpected needs\n\n # Overview\n\n The `Status` message contains three pieces of data: error code, error message,\n and error details. The error code should be an enum value of\n [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The\n error message should be a developer-facing English message that helps\n developers *understand* and *resolve* the error. If a localized user-facing\n error message is needed, put the localized message in the error details or\n localize it in the client. The optional error details may contain arbitrary\n information about the error. There is a predefined set of error detail types\n in the package `google.rpc` that can be used for common error conditions.\n\n # Language mapping\n\n The `Status` message is the logical representation of the error model, but it\n is not necessarily the actual wire format. When the `Status` message is\n exposed in different client libraries and different wire protocols, it can be\n mapped differently. For example, it will likely be mapped to some exceptions\n in Java, but more likely mapped to some error codes in C.\n\n # Other uses\n\n The error model and the `Status` message can be used in a variety of\n environments, either with or without APIs, to provide a\n consistent developer experience across different environments.\n\n Example uses of this error model include:\n\n - Partial errors. If a service needs to return partial errors to the client,\n     it may embed the `Status` in the normal response to indicate the partial\n     errors.\n\n - Workflow errors. A typical workflow has multiple steps. Each step may\n     have a `Status` message for error reporting.\n\n - Batch operations. If a client uses batch request and batch response, the\n     `Status` message should be used directly inside batch response, one for\n     each error sub-response.\n\n - Asynchronous operations. If an API call embeds asynchronous operation\n     results in its response, the status of those operations should be\n     represented directly using the `Status` message.\n\n - Logging. If some API errors are stored in logs, the message `Status` could\n     be used directly after any stripping needed for security/privacy reasons.\n"
  Trailing Comments: ""
  Address: ["google", "rpc", "Status"]
  Fields:
    Field: code
      Leading Comments: " The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].\n"
      Trailing Comments: ""
      Address: ["google", "rpc", "Status", "code"]
      Type: 5
    Field: message
      Leading Comments: " A developer-facing error message, which should be in English. Any\n user-facing error message should be localized and sent in the\n [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.\n"
      Trailing Comments: ""
      Address: ["google", "rpc", "Status", "message"]
      Type: 9
    Field: details
      Leading Comments: " A list of messages that carry the error details.  There is a common set of\n message types for APIs to use.\n"
      Trailing Comments: ""
      Address: ["google", "rpc", "Status", "details"]
      Message: Any

Message: Operation
  Leading Comments: " This resource represents a long-running operation that is the result of a\n network API call.\n"
  Trailing Comments: ""
  Address: ["google", "longrunning", "Operation"]
  Fields:
    Field: name
      Leading Comments: " The server-assigned name, which is only unique within the same service that\n originally returns it. If you use the default HTTP mapping, the\n `name` should have the format of `operations/some/unique/name`.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "Operation", "name"]
      Type: 9
    Field: metadata
      Leading Comments: " Service-specific metadata associated with the operation.  It typically\n contains progress information and common metadata such as create time.\n Some services might not provide such metadata.  Any method that returns a\n long-running operation should document the metadata type, if any.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "Operation", "metadata"]
      Message: Any
    Field: done
      Leading Comments: " If the value is `false`, it means the operation is still in progress.\n If true, the operation is completed, and either `error` or `response` is\n available.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "Operation", "done"]
      Type: 8
    Field: error
      Leading Comments: " The error result of the operation in case of failure or cancellation.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "Operation", "error"]
      Message: Status
    Field: response
      Leading Comments: " The normal response of the operation in case of success.  If the original\n method returns no data on success, such as `Delete`, the response is\n `google.protobuf.Empty`.  If the original method is standard\n `Get`/`Create`/`Update`, the response should be the resource.  For other\n methods, the response should have the type `XxxResponse`, where `Xxx`\n is the original method name.  For example, if the original method name\n is `TakeSnapshot()`, the inferred response type is\n `TakeSnapshotResponse`.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "Operation", "response"]
      Message: Any

Message: GetOperationRequest
  Leading Comments: " The request message for [Operations.GetOperation][google.longrunning.Operations.GetOperation].\n"
  Trailing Comments: ""
  Address: ["google", "longrunning", "GetOperationRequest"]
  Fields:
    Field: name
      Leading Comments: " The name of the operation resource.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "GetOperationRequest", "name"]
      Type: 9

Message: ListOperationsRequest
  Leading Comments: " The request message for [Operations.ListOperations][google.longrunning.Operations.ListOperations].\n"
  Trailing Comments: ""
  Address: ["google", "longrunning", "ListOperationsRequest"]
  Fields:
    Field: name
      Leading Comments: " The name of the operation collection.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "ListOperationsRequest", "name"]
      Type: 9
    Field: filter
      Leading Comments: " The standard list filter.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "ListOperationsRequest", "filter"]
      Type: 9
    Field: page_size
      Leading Comments: " The standard list page size.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "ListOperationsRequest", "page_size"]
      Type: 5
    Field: page_token
      Leading Comments: " The standard list page token.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "ListOperationsRequest", "page_token"]
      Type: 9

Message: ListOperationsResponse
  Leading Comments: " The response message for [Operations.ListOperations][google.longrunning.Operations.ListOperations].\n"
  Trailing Comments: ""
  Address: ["google", "longrunning", "ListOperationsResponse"]
  Fields:
    Field: operations
      Leading Comments: " A list of operations that matches the specified filter in the request.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "ListOperationsResponse", "operations"]
      Message: Operation
    Field: next_page_token
      Leading Comments: " The standard List next-page token.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "ListOperationsResponse", "next_page_token"]
      Type: 9

Message: CancelOperationRequest
  Leading Comments: " The request message for [Operations.CancelOperation][google.longrunning.Operations.CancelOperation].\n"
  Trailing Comments: ""
  Address: ["google", "longrunning", "CancelOperationRequest"]
  Fields:
    Field: name
      Leading Comments: " The name of the operation resource to be cancelled.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "CancelOperationRequest", "name"]
      Type: 9

Message: DeleteOperationRequest
  Leading Comments: " The request message for [Operations.DeleteOperation][google.longrunning.Operations.DeleteOperation].\n"
  Trailing Comments: ""
  Address: ["google", "longrunning", "DeleteOperationRequest"]
  Fields:
    Field: name
      Leading Comments: " The name of the operation resource to be deleted.\n"
      Trailing Comments: ""
      Address: ["google", "longrunning", "DeleteOperationRequest", "name"]
      Type: 9

Message: Duration
  Leading Comments: " A Duration represents a signed, fixed-length span of time represented\n as a count of seconds and fractions of seconds at nanosecond\n resolution. It is independent of any calendar and concepts like \"day\"\n or \"month\". It is related to Timestamp in that the difference between\n two Timestamp values is a Duration and it can be added or subtracted\n from a Timestamp. Range is approximately +-10,000 years.\n\n # Examples\n\n Example 1: Compute Duration from two Timestamps in pseudo code.\n\n     Timestamp start = ...;\n     Timestamp end = ...;\n     Duration duration = ...;\n\n     duration.seconds = end.seconds - start.seconds;\n     duration.nanos = end.nanos - start.nanos;\n\n     if (duration.seconds < 0 && duration.nanos > 0) {\n       duration.seconds += 1;\n       duration.nanos -= 1000000000;\n     } else if (durations.seconds > 0 && duration.nanos < 0) {\n       duration.seconds -= 1;\n       duration.nanos += 1000000000;\n     }\n\n Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n     Timestamp start = ...;\n     Duration duration = ...;\n     Timestamp end = ...;\n\n     end.seconds = start.seconds + duration.seconds;\n     end.nanos = start.nanos + duration.nanos;\n\n     if (end.nanos < 0) {\n       end.seconds -= 1;\n       end.nanos += 1000000000;\n     } else if (end.nanos >= 1000000000) {\n       end.seconds += 1;\n       end.nanos -= 1000000000;\n     }\n\n Example 3: Compute Duration from datetime.timedelta in Python.\n\n     td = datetime.timedelta(days=3, minutes=10)\n     duration = Duration()\n     duration.FromTimedelta(td)\n\n # JSON Mapping\n\n In JSON format, the Duration type is encoded as a string rather than an\n object, where the string ends in the suffix \"s\" (indicating seconds) and\n is preceded by the number of seconds, with nanoseconds expressed as\n fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n microsecond should be expressed in JSON format as \"3.000001s\".\n\n\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "Duration"]
  Fields:
    Field: seconds
      Leading Comments: " Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "Duration", "seconds"]
      Type: 3
    Field: nanos
      Leading Comments: " Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "Duration", "nanos"]
      Type: 5

Message: Timestamp
  Leading Comments: " A Timestamp represents a point in time independent of any time zone\n or calendar, represented as seconds and fractions of seconds at\n nanosecond resolution in UTC Epoch time. It is encoded using the\n Proleptic Gregorian Calendar which extends the Gregorian calendar\n backwards to year one. It is encoded assuming all minutes are 60\n seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n table is needed for interpretation. Range is from\n 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\n By restricting to that range, we ensure that we can convert to\n and from  RFC 3339 date strings.\n See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).\n\n # Examples\n\n Example 1: Compute Timestamp from POSIX `time()`.\n\n     Timestamp timestamp;\n     timestamp.set_seconds(time(NULL));\n     timestamp.set_nanos(0);\n\n Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n\n     Timestamp timestamp;\n     timestamp.set_seconds(tv.tv_sec);\n     timestamp.set_nanos(tv.tv_usec * 1000);\n\n Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n     FILETIME ft;\n     GetSystemTimeAsFileTime(&ft);\n     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\n     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n     Timestamp timestamp;\n     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\n Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n     long millis = System.currentTimeMillis();\n\n     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n         .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\n Example 5: Compute Timestamp from current time in Python.\n\n     timestamp = Timestamp()\n     timestamp.GetCurrentTime()\n\n # JSON Mapping\n\n In JSON format, the Timestamp type is encoded as a string in the\n [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n where {year} is always expressed using four digits while {month}, {day},\n {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n is required. A proto3 JSON serializer should always use UTC (as indicated by\n \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n able to accept both UTC and other timezones (as indicated by an offset).\n\n For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n 01:30 UTC on January 15, 2017.\n\n In JavaScript, one can convert a Date object to this format using the\n standard [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString]\n method. In Python, a standard `datetime.datetime` object can be converted\n to this format using [`strftime`](https://docs.python.org/2/library/time.html#time.strftime)\n with the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one\n can use the Joda Time's [`ISODateTimeFormat.dateTime()`](\n http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime--\n ) to obtain a formatter capable of generating timestamps in this format.\n\n\n"
  Trailing Comments: ""
  Address: ["google", "protobuf", "Timestamp"]
  Fields:
    Field: seconds
      Leading Comments: " Represents seconds of UTC time since Unix epoch\n 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n 9999-12-31T23:59:59Z inclusive.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "Timestamp", "seconds"]
      Type: 3
    Field: nanos
      Leading Comments: " Non-negative fractions of a second at nanosecond resolution. Negative\n second values with fractions must still have non-negative nanos values\n that count forward in time. Must be from 0 to 999,999,999\n inclusive.\n"
      Trailing Comments: ""
      Address: ["google", "protobuf", "Timestamp", "nanos"]
      Type: 5

Message: RecognizeRequest
  Leading Comments: " The top-level message sent by the client for the `Recognize` method.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "RecognizeRequest"]
  Fields:
    Field: config
      Leading Comments: " *Required* Provides information to the recognizer that specifies how to\n process the request.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognizeRequest", "config"]
      Message: RecognitionConfig
    Field: audio
      Leading Comments: " *Required* The audio data to be recognized.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognizeRequest", "audio"]
      Message: RecognitionAudio

Message: LongRunningRecognizeRequest
  Leading Comments: " The top-level message sent by the client for the `LongRunningRecognize`\n method.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeRequest"]
  Fields:
    Field: config
      Leading Comments: " *Required* Provides information to the recognizer that specifies how to\n process the request.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeRequest", "config"]
      Message: RecognitionConfig
    Field: audio
      Leading Comments: " *Required* The audio data to be recognized.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeRequest", "audio"]
      Message: RecognitionAudio

Message: StreamingRecognizeRequest
  Leading Comments: " The top-level message sent by the client for the `StreamingRecognize` method.\n Multiple `StreamingRecognizeRequest` messages are sent. The first message\n must contain a `streaming_config` message and must not contain `audio` data.\n All subsequent messages must contain `audio` data and must not contain a\n `streaming_config` message.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeRequest"]
  Fields:
    Field: streaming_config
      Leading Comments: " Provides information to the recognizer that specifies how to process the\n request. The first `StreamingRecognizeRequest` message must contain a\n `streaming_config`  message.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeRequest", "streaming_config"]
      Message: StreamingRecognitionConfig
    Field: audio_content
      Leading Comments: " The audio data to be recognized. Sequential chunks of audio data are sent\n in sequential `StreamingRecognizeRequest` messages. The first\n `StreamingRecognizeRequest` message must not contain `audio_content` data\n and all subsequent `StreamingRecognizeRequest` messages must contain\n `audio_content` data. The audio bytes must be encoded as specified in\n `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a\n pure binary representation (not base64). See\n [content limits](/speech-to-text/quotas#content).\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeRequest", "audio_content"]
      Type: 12

Message: StreamingRecognitionConfig
  Leading Comments: " Provides information to the recognizer that specifies how to process the\n request.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionConfig"]
  Fields:
    Field: config
      Leading Comments: " *Required* Provides information to the recognizer that specifies how to\n process the request.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionConfig", "config"]
      Message: RecognitionConfig
    Field: single_utterance
      Leading Comments: " *Optional* If `false` or omitted, the recognizer will perform continuous\n recognition (continuing to wait for and process audio even if the user\n pauses speaking) until the client closes the input stream (gRPC API) or\n until the maximum time limit has been reached. May return multiple\n `StreamingRecognitionResult`s with the `is_final` flag set to `true`.\n\n If `true`, the recognizer will detect a single spoken utterance. When it\n detects that the user has paused or stopped speaking, it will return an\n `END_OF_SINGLE_UTTERANCE` event and cease recognition. It will return no\n more than one `StreamingRecognitionResult` with the `is_final` flag set to\n `true`.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionConfig", "single_utterance"]
      Type: 8
    Field: interim_results
      Leading Comments: " *Optional* If `true`, interim results (tentative hypotheses) may be\n returned as they become available (these interim results are indicated with\n the `is_final=false` flag).\n If `false` or omitted, only `is_final=true` result(s) are returned.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionConfig", "interim_results"]
      Type: 8

Message: RecognitionConfig
  Leading Comments: " Provides information to the recognizer that specifies how to process the\n request.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "RecognitionConfig"]
  Fields:
    Field: encoding
      Leading Comments: " Encoding of audio data sent in all `RecognitionAudio` messages.\n This field is optional for `FLAC` and `WAV` audio files and required\n for all other audio formats. For details, see [AudioEncoding][google.cloud.speech.v1.RecognitionConfig.AudioEncoding].\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "encoding"]
      Enum: AudioEncoding
    Field: sample_rate_hertz
      Leading Comments: " Sample rate in Hertz of the audio data sent in all\n `RecognitionAudio` messages. Valid values are: 8000-48000.\n 16000 is optimal. For best results, set the sampling rate of the audio\n source to 16000 Hz. If that's not possible, use the native sample rate of\n the audio source (instead of re-sampling).\n This field is optional for `FLAC` and `WAV` audio files and required\n for all other audio formats. For details, see [AudioEncoding][google.cloud.speech.v1.RecognitionConfig.AudioEncoding].\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "sample_rate_hertz"]
      Type: 5
    Field: language_code
      Leading Comments: " *Required* The language of the supplied audio as a\n [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.\n Example: \"en-US\".\n See [Language Support](/speech-to-text/docs/languages)\n for a list of the currently supported language codes.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "language_code"]
      Type: 9
    Field: max_alternatives
      Leading Comments: " *Optional* Maximum number of recognition hypotheses to be returned.\n Specifically, the maximum number of `SpeechRecognitionAlternative` messages\n within each `SpeechRecognitionResult`.\n The server may return fewer than `max_alternatives`.\n Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of\n one. If omitted, will return a maximum of one.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "max_alternatives"]
      Type: 5
    Field: profanity_filter
      Leading Comments: " *Optional* If set to `true`, the server will attempt to filter out\n profanities, replacing all but the initial character in each filtered word\n with asterisks, e.g. \"f***\". If set to `false` or omitted, profanities\n won't be filtered out.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "profanity_filter"]
      Type: 8
    Field: speech_contexts
      Leading Comments: " *Optional* array of [SpeechContext][google.cloud.speech.v1.SpeechContext].\n A means to provide context to assist the speech recognition. For more\n information, see [Phrase Hints](/speech-to-text/docs/basics#phrase-hints).\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "speech_contexts"]
      Message: SpeechContext
    Field: enable_word_time_offsets
      Leading Comments: " *Optional* If `true`, the top result includes a list of words and\n the start and end time offsets (timestamps) for those words. If\n `false`, no word-level time offset information is returned. The default is\n `false`.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "enable_word_time_offsets"]
      Type: 8
    Field: enable_automatic_punctuation
      Leading Comments: " *Optional* If 'true', adds punctuation to recognition result hypotheses.\n This feature is only available in select languages. Setting this for\n requests in other languages has no effect at all.\n The default 'false' value does not add punctuation to result hypotheses.\n Note: This is currently offered as an experimental service, complimentary\n to all users. In the future this may be exclusively available as a\n premium feature.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "enable_automatic_punctuation"]
      Type: 8
    Field: model
      Leading Comments: " *Optional* Which model to select for the given request. Select the model\n best suited to your domain to get best results. If a model is not\n explicitly specified, then we auto-select a model based on the parameters\n in the RecognitionConfig.\n <table>\n   <tr>\n     <td><b>Model</b></td>\n     <td><b>Description</b></td>\n   </tr>\n   <tr>\n     <td><code>command_and_search</code></td>\n     <td>Best for short queries such as voice commands or voice search.</td>\n   </tr>\n   <tr>\n     <td><code>phone_call</code></td>\n     <td>Best for audio that originated from a phone call (typically\n     recorded at an 8khz sampling rate).</td>\n   </tr>\n   <tr>\n     <td><code>video</code></td>\n     <td>Best for audio that originated from from video or includes multiple\n         speakers. Ideally the audio is recorded at a 16khz or greater\n         sampling rate. This is a premium model that costs more than the\n         standard rate.</td>\n   </tr>\n   <tr>\n     <td><code>default</code></td>\n     <td>Best for audio that is not one of the specific audio models.\n         For example, long-form audio. Ideally the audio is high-fidelity,\n         recorded at a 16khz or greater sampling rate.</td>\n   </tr>\n </table>\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "model"]
      Type: 9
    Field: use_enhanced
      Leading Comments: " *Optional* Set to true to use an enhanced model for speech recognition.\n You must also set the `model` field to a valid, enhanced model. If\n `use_enhanced` is set to true and the `model` field is not set, then\n `use_enhanced` is ignored. If `use_enhanced` is true and an enhanced\n version of the specified model does not exist, then the speech is\n recognized using the standard version of the specified model.\n\n Enhanced speech models require that you opt-in to data logging using\n instructions in the [documentation](/speech-to-text/enable-data-logging).\n If you set `use_enhanced` to true and you have not enabled audio logging,\n then you will receive an error.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionConfig", "use_enhanced"]
      Type: 8

Message: SpeechContext
  Leading Comments: " Provides \"hints\" to the speech recognizer to favor specific words and phrases\n in the results.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "SpeechContext"]
  Fields:
    Field: phrases
      Leading Comments: " *Optional* A list of strings containing words and phrases \"hints\" so that\n the speech recognition is more likely to recognize them. This can be used\n to improve the accuracy for specific words and phrases, for example, if\n specific commands are typically spoken by the user. This can also be used\n to add additional words to the vocabulary of the recognizer. See\n [usage limits](/speech-to-text/quotas#content).\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "SpeechContext", "phrases"]
      Type: 9

Message: RecognitionAudio
  Leading Comments: " Contains audio data in the encoding specified in the `RecognitionConfig`.\n Either `content` or `uri` must be supplied. Supplying both or neither\n returns [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]. See\n [content limits](/speech-to-text/quotas#content).\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "RecognitionAudio"]
  Fields:
    Field: content
      Leading Comments: " The audio data bytes encoded as specified in\n `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a\n pure binary representation, whereas JSON representations use base64.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionAudio", "content"]
      Type: 12
    Field: uri
      Leading Comments: " URI that points to a file that contains audio data bytes as specified in\n `RecognitionConfig`. The file must not be compressed (for example, gzip).\n Currently, only Google Cloud Storage URIs are\n supported, which must be specified in the following format:\n `gs://bucket_name/object_name` (other URI formats return\n [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]). For more information, see\n [Request URIs](https://cloud.google.com/storage/docs/reference-uris).\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognitionAudio", "uri"]
      Type: 9

Message: RecognizeResponse
  Leading Comments: " The only message returned to the client by the `Recognize` method. It\n contains the result as zero or more sequential `SpeechRecognitionResult`\n messages.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "RecognizeResponse"]
  Fields:
    Field: results
      Leading Comments: " Output only. Sequential list of transcription results corresponding to\n sequential portions of audio.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "RecognizeResponse", "results"]
      Message: SpeechRecognitionResult

Message: LongRunningRecognizeResponse
  Leading Comments: " The only message returned to the client by the `LongRunningRecognize` method.\n It contains the result as zero or more sequential `SpeechRecognitionResult`\n messages. It is included in the `result.response` field of the `Operation`\n returned by the `GetOperation` call of the `google::longrunning::Operations`\n service.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeResponse"]
  Fields:
    Field: results
      Leading Comments: " Output only. Sequential list of transcription results corresponding to\n sequential portions of audio.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeResponse", "results"]
      Message: SpeechRecognitionResult

Message: LongRunningRecognizeMetadata
  Leading Comments: " Describes the progress of a long-running `LongRunningRecognize` call. It is\n included in the `metadata` field of the `Operation` returned by the\n `GetOperation` call of the `google::longrunning::Operations` service.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeMetadata"]
  Fields:
    Field: progress_percent
      Leading Comments: " Approximate percentage of audio processed thus far. Guaranteed to be 100\n when the audio is fully processed and the results are available.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeMetadata", "progress_percent"]
      Type: 5
    Field: start_time
      Leading Comments: " Time when the request was received.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeMetadata", "start_time"]
      Message: Timestamp
    Field: last_update_time
      Leading Comments: " Time of the most recent processing update.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeMetadata", "last_update_time"]
      Message: Timestamp

Message: StreamingRecognizeResponse
  Leading Comments: " `StreamingRecognizeResponse` is the only message returned to the client by\n `StreamingRecognize`. A series of zero or more `StreamingRecognizeResponse`\n messages are streamed back to the client. If there is no recognizable\n audio, and `single_utterance` is set to false, then no messages are streamed\n back to the client.\n\n Here's an example of a series of ten `StreamingRecognizeResponse`s that might\n be returned while processing audio:\n\n 1. results { alternatives { transcript: \"tube\" } stability: 0.01 }\n\n 2. results { alternatives { transcript: \"to be a\" } stability: 0.01 }\n\n 3. results { alternatives { transcript: \"to be\" } stability: 0.9 }\n    results { alternatives { transcript: \" or not to be\" } stability: 0.01 }\n\n 4. results { alternatives { transcript: \"to be or not to be\"\n                             confidence: 0.92 }\n              alternatives { transcript: \"to bee or not to bee\" }\n              is_final: true }\n\n 5. results { alternatives { transcript: \" that's\" } stability: 0.01 }\n\n 6. results { alternatives { transcript: \" that is\" } stability: 0.9 }\n    results { alternatives { transcript: \" the question\" } stability: 0.01 }\n\n 7. results { alternatives { transcript: \" that is the question\"\n                             confidence: 0.98 }\n              alternatives { transcript: \" that was the question\" }\n              is_final: true }\n\n Notes:\n\n - Only two of the above responses #4 and #7 contain final results; they are\n   indicated by `is_final: true`. Concatenating these together generates the\n   full transcript: \"to be or not to be that is the question\".\n\n - The others contain interim `results`. #3 and #6 contain two interim\n   `results`: the first portion has a high stability and is less likely to\n   change; the second portion has a low stability and is very likely to\n   change. A UI designer might choose to show only high stability `results`.\n\n - The specific `stability` and `confidence` values shown above are only for\n   illustrative purposes. Actual values may vary.\n\n - In each response, only one of these fields will be set:\n     `error`,\n     `speech_event_type`, or\n     one or more (repeated) `results`.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeResponse"]
  Fields:
    Field: error
      Leading Comments: " Output only. If set, returns a [google.rpc.Status][google.rpc.Status] message that\n specifies the error for the operation.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeResponse", "error"]
      Message: Status
    Field: results
      Leading Comments: " Output only. This repeated list contains zero or more results that\n correspond to consecutive portions of the audio currently being processed.\n It contains zero or one `is_final=true` result (the newly settled portion),\n followed by zero or more `is_final=false` results (the interim results).\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeResponse", "results"]
      Message: StreamingRecognitionResult
    Field: speech_event_type
      Leading Comments: " Output only. Indicates the type of speech event.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeResponse", "speech_event_type"]
      Enum: SpeechEventType

Message: StreamingRecognitionResult
  Leading Comments: " A streaming speech recognition result corresponding to a portion of the audio\n that is currently being processed.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionResult"]
  Fields:
    Field: alternatives
      Leading Comments: " Output only. May contain one or more recognition hypotheses (up to the\n maximum specified in `max_alternatives`).\n These alternatives are ordered in terms of accuracy, with the top (first)\n alternative being the most probable, as ranked by the recognizer.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionResult", "alternatives"]
      Message: SpeechRecognitionAlternative
    Field: is_final
      Leading Comments: " Output only. If `false`, this `StreamingRecognitionResult` represents an\n interim result that may change. If `true`, this is the final time the\n speech service will return this particular `StreamingRecognitionResult`,\n the recognizer will not return any further hypotheses for this portion of\n the transcript and corresponding audio.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionResult", "is_final"]
      Type: 8
    Field: stability
      Leading Comments: " Output only. An estimate of the likelihood that the recognizer will not\n change its guess about this interim result. Values range from 0.0\n (completely unstable) to 1.0 (completely stable).\n This field is only provided for interim results (`is_final=false`).\n The default of 0.0 is a sentinel value indicating `stability` was not set.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "StreamingRecognitionResult", "stability"]
      Type: 2

Message: SpeechRecognitionResult
  Leading Comments: " A speech recognition result corresponding to a portion of the audio.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "SpeechRecognitionResult"]
  Fields:
    Field: alternatives
      Leading Comments: " Output only. May contain one or more recognition hypotheses (up to the\n maximum specified in `max_alternatives`).\n These alternatives are ordered in terms of accuracy, with the top (first)\n alternative being the most probable, as ranked by the recognizer.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "SpeechRecognitionResult", "alternatives"]
      Message: SpeechRecognitionAlternative

Message: SpeechRecognitionAlternative
  Leading Comments: " Alternative hypotheses (a.k.a. n-best list).\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "SpeechRecognitionAlternative"]
  Fields:
    Field: transcript
      Leading Comments: " Output only. Transcript text representing the words that the user spoke.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "SpeechRecognitionAlternative", "transcript"]
      Type: 9
    Field: confidence
      Leading Comments: " Output only. The confidence estimate between 0.0 and 1.0. A higher number\n indicates an estimated greater likelihood that the recognized words are\n correct. This field is set only for the top alternative of a non-streaming\n result or, of a streaming result where `is_final=true`.\n This field is not guaranteed to be accurate and users should not rely on it\n to be always provided.\n The default of 0.0 is a sentinel value indicating `confidence` was not set.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "SpeechRecognitionAlternative", "confidence"]
      Type: 2
    Field: words
      Leading Comments: " Output only. A list of word-specific information for each recognized word.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "SpeechRecognitionAlternative", "words"]
      Message: WordInfo

Message: WordInfo
  Leading Comments: " Word-specific information for recognized words.\n"
  Trailing Comments: ""
  Address: ["google", "cloud", "speech", "v1", "WordInfo"]
  Fields:
    Field: start_time
      Leading Comments: " Output only. Time offset relative to the beginning of the audio,\n and corresponding to the start of the spoken word.\n This field is only set if `enable_word_time_offsets=true` and only\n in the top hypothesis.\n This is an experimental feature and the accuracy of the time offset can\n vary.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "WordInfo", "start_time"]
      Message: Duration
    Field: end_time
      Leading Comments: " Output only. Time offset relative to the beginning of the audio,\n and corresponding to the end of the spoken word.\n This field is only set if `enable_word_time_offsets=true` and only\n in the top hypothesis.\n This is an experimental feature and the accuracy of the time offset can\n vary.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "WordInfo", "end_time"]
      Message: Duration
    Field: word
      Leading Comments: " Output only. The word corresponding to this set of information.\n"
      Trailing Comments: ""
      Address: ["google", "cloud", "speech", "v1", "WordInfo", "word"]
      Type: 9



Service: Operations
  Leading Comments: " Manages long-running operations with an API service.\n\n When an API method normally takes long time to complete, it can be designed\n to return [Operation][google.longrunning.Operation] to the client, and the client can use this\n interface to receive the real response asynchronously by polling the\n operation resource, or pass the operation resource to another API (such as\n Google Cloud Pub/Sub API) to receive the response.  Any API service that\n returns long-running operations should implement the `Operations` interface\n so developers can have a consistent client experience.\n"
  Trailing Comments: ""
  Address ["google", "longrunning", "Operations"]
    Method: ListOperations
      Leading Comments: " Lists operations that match the specified filter in the request. If the\n server doesn't support this method, it returns `UNIMPLEMENTED`.\n\n NOTE: the `name` binding below allows API services to override the binding\n to use different resource name schemes, such as `users/*/operations`.\n"
      Trailing Comments: ""
      Address ["google", "longrunning", "Operations", "ListOperations"]
      Input Type: ListOperationsRequest
        Address: ["google", "longrunning", "ListOperationsRequest"]
      Output Type: ListOperationsResponse
        Address: ["google", "longrunning", "ListOperationsResponse"]

    Method: GetOperation
      Leading Comments: " Gets the latest state of a long-running operation.  Clients can use this\n method to poll the operation result at intervals as recommended by the API\n service.\n"
      Trailing Comments: ""
      Address ["google", "longrunning", "Operations", "GetOperation"]
      Input Type: GetOperationRequest
        Address: ["google", "longrunning", "GetOperationRequest"]
      Output Type: Operation
        Address: ["google", "longrunning", "Operation"]

    Method: DeleteOperation
      Leading Comments: " Deletes a long-running operation. This method indicates that the client is\n no longer interested in the operation result. It does not cancel the\n operation. If the server doesn't support this method, it returns\n `google.rpc.Code.UNIMPLEMENTED`.\n"
      Trailing Comments: ""
      Address ["google", "longrunning", "Operations", "DeleteOperation"]
      Input Type: DeleteOperationRequest
        Address: ["google", "longrunning", "DeleteOperationRequest"]
      Output Type: Empty
        Address: ["google", "protobuf", "Empty"]

    Method: CancelOperation
      Leading Comments: " Starts asynchronous cancellation on a long-running operation.  The server\n makes a best effort to cancel the operation, but success is not\n guaranteed.  If the server doesn't support this method, it returns\n `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n [Operations.GetOperation][google.longrunning.Operations.GetOperation] or\n other methods to check whether the cancellation succeeded or whether the\n operation completed despite cancellation. On successful cancellation,\n the operation is not deleted; instead, it becomes an operation with\n an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,\n corresponding to `Code.CANCELLED`.\n"
      Trailing Comments: ""
      Address ["google", "longrunning", "Operations", "CancelOperation"]
      Input Type: CancelOperationRequest
        Address: ["google", "longrunning", "CancelOperationRequest"]
      Output Type: Empty
        Address: ["google", "protobuf", "Empty"]


Service: Speech
  Leading Comments: " Service that implements Google Cloud Speech API.\n"
  Trailing Comments: ""
  Address ["google", "cloud", "speech", "v1", "Speech"]
    Method: Recognize
      Leading Comments: " Performs synchronous speech recognition: receive results after all audio\n has been sent and processed.\n"
      Trailing Comments: ""
      Address ["google", "cloud", "speech", "v1", "Speech", "Recognize"]
      Input Type: RecognizeRequest
        Address: ["google", "cloud", "speech", "v1", "RecognizeRequest"]
      Output Type: RecognizeResponse
        Address: ["google", "cloud", "speech", "v1", "RecognizeResponse"]

    Method: LongRunningRecognize
      Leading Comments: " Performs asynchronous speech recognition: receive results via the\n google.longrunning.Operations interface. Returns either an\n `Operation.error` or an `Operation.response` which contains\n a `LongRunningRecognizeResponse` message.\n"
      Trailing Comments: ""
      Address ["google", "cloud", "speech", "v1", "Speech", "LongRunningRecognize"]
      Input Type: LongRunningRecognizeRequest
        Address: ["google", "cloud", "speech", "v1", "LongRunningRecognizeRequest"]
      Output Type: Operation
        Address: ["google", "longrunning", "Operation"]

    Method: StreamingRecognize
      Leading Comments: " Performs bidirectional streaming speech recognition: receive results while\n sending audio. This method is only available via the gRPC API (not REST).\n"
      Trailing Comments: ""
      Address ["google", "cloud", "speech", "v1", "Speech", "StreamingRecognize"]
      Input Type: StreamingRecognizeRequest
        Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeRequest"]
      Output Type: StreamingRecognizeResponse
        Address: ["google", "cloud", "speech", "v1", "StreamingRecognizeResponse"]


